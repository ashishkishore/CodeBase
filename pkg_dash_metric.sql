CREATE OR REPLACE PACKAGE MSDO_DASH_ADMIN.PKG_DASH_METRIC
AS
    PROCEDURE LOAD_STG(ASTART DATE,AEND DATE);
    PROCEDURE SET_COMP_FAC_FLAT;
    PROCEDURE RUN_METRIC_FOR_ALL(ASTART DATE DEFAULT TRUNC(NEXT_DAY(SYSDATE,'SUNDAY')-14),AEND DATE DEFAULT TRUNC(NEXT_DAY(SYSDATE,'SUNDAY')-8),METRIC_PRC_NM VARCHAR2 DEFAULT NULL,RELOAD VARCHAR2 DEFAULT NULL,DURATION VARCHAR2 DEFAULT NULL);
    PROCEDURE SET_PM_QUALITY(ASTART DATE,AEND DATE);
	PROCEDURE SET_NUMBER_OF_WEEKLY_ROUTES(ASTART DATE,AEND DATE);
    PROCEDURE SET_PM_EFFICIENCY(ASTART DATE,AEND DATE);
    PROCEDURE SET_VISITS_BTWN_PMI_SITE(ASTART DATE,AEND DATE);
    PROCEDURE SET_DOWN_IN_YARD_SITE(ASTART DATE,AEND DATE);
    PROCEDURE SET_DNTM_HRS_PER_CSI_SITE(ASTART DATE,AEND DATE);
    PROCEDURE SET_DNTM_HRS_PER_RTE_SITE(ASTART DATE,AEND DATE);
    PROCEDURE SET_DOWN_ON_ROUTE_SITE(ASTART DATE,AEND DATE);
    PROCEDURE SET_TECHNICIAN_HRS_SITE(ASTART DATE,AEND DATE);
	PROCEDURE SET_SRT_VS_ACT_JOB(ASTART DATE,AEND DATE);
    PROCEDURE SET_DIRECT_HRS_SITE(ASTART DATE,AEND DATE);
	PROCEDURE SET_BACKLOG_TRUCK_SITE(ASTART DATE,AEND DATE);
    PROCEDURE SET_DELETE_METRICS( ASTART DATE,AEND DATE);
    PROCEDURE SET_PUSH_METRICS;
    PROCEDURE SET_UPDATE_METRIC(ASTART DATE, AEND DATE, METRIC_PRC_NM VARCHAR2);
    PROCEDURE SET_DISCARD_2YEARS_OLD;
    PROCEDURE SET_PM_QUALITY_UNITS(ASTART DATE,AEND DATE);
    PROCEDURE SET_DNTM_HRS_PER_RTE_UNITS(ASTART DATE,AEND DATE);
    PROCEDURE SET_DOWN_IN_YARD_UNITS(ASTART DATE,AEND DATE);
    PROCEDURE SET_DOWN_ON_ROUTE_UNITS(ASTART DATE,AEND DATE);
    PROCEDURE SET_DNTM_HRS_PER_CSI_UNITS(ASTART DATE,AEND DATE);
    PROCEDURE SET_CSIS_BTWN_PMS_UNITS(ASTART DATE,AEND DATE);
    PROCEDURE SET_SRT_VS_ACT_JOB_UNITS(ASTART DATE,AEND DATE);
    PROCEDURE SET_VISITS_BTWN_PMI_UNITS(ASTART DATE,AEND DATE);
    PROCEDURE SET_PM_EFFICIENCY_UNITS(ASTART DATE,AEND DATE);
    PROCEDURE SET_BACKLOG_TRUCK_UNITS(ASTART DATE,AEND DATE);
	PROCEDURE SET_ART_IN_BACKLOG(ASTART DATE,AEND DATE);
    PROCEDURE SET_DIRECT_HRS_TECHS(ASTART DATE,AEND DATE);
    PROCEDURE SET_TECHNICIAN_HRS_TECHSET_CSIS_BTWN_PMS_UNITSS(ASTART DATE,AEND DATE);
	PROCEDURE SET_NUMBER_OF_TECH(ASTART DATE,AEND DATE);
    PROCEDURE METRIC_COMPUTATION(ASTART DATE,AEND DATE);
    PROCEDURE SEQUENTIAL_RUN(REV_START_DT DATE,DURATION VARCHAR2,METRIC_PRC_NM VARCHAR2 DEFAULT NULL);
END;
/
CREATE OR REPLACE PACKAGE BODY MSDO_DASH_ADMIN.PKG_DASH_METRIC
AS
    /*==================================================================================

    DEVELOPED BY:   ASHOKAN BALAN    VERSION    1.1     DATE: 05/23/2016 0521 PM
    DEVELOPED BY:   ASHOKAN BALAN    VERSION    1.2     DATE: 05/24/2016 0533 AM
    DEVELOPED BY:   ASHOKAN BALAN    VERSION    1.5     DATE: 05/26/2016 0233 AM
    DEVELOPED BY:   ASHOKAN BALAN    VERSION    1.5.1   DATE: 05/27/2016 0233 AM
    DEVELOPED BY:   TUSHAR JOSHI     VERSION    1.6     DATE: 05/31/2016 0233 AM
    DEVELOPED BY:   TUSHAR JOSHI     VERSION    1.7     DATE: 05/31/2016 0433 PM
    DEVELOPED BY:   TUSHAR JOSHI     VERSION    1.8     DATE: 08/06/2016 0433 PM
    DEVELOPED BY:   TUSHAR JOSHI     VERSION    1.9     DATE: 10/06/2016 0433 PM
    DEVELOPED BY:   TUSHAR JOSHI     VERSION    2.0     DATE: 22/06/2016 0433 PM
    DEVELOPED BY:   TUSHAR JOSHI     VERSION    2.1     DATE: 29/06/2016 1233 PM
    DEVELOPED BY:   TUSHAR JOSHI     VERSION    2.2     DATE: 04/07/2016 1233 PM
    DEVELOPED BY:   TUSHAR JOSHI     VERSION    3.0     DATE: 07/07/2016 1233 PM
    DEVELOPED BY:   TUSHAR JOSHI     VERSION    3.1     DATE: 13/07/2016 1233 PM
    DEVELOPED BY:   TUSHAR JOSHI     VERSION    3.2     DATE: 18/07/2016 1233 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    3.3     DATE: 21/07/2016 0627 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    3.4     DATE: 26/07/2016 0627 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    3.5     DATE: 28/07/2016 0909 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    3.6     DATE: 02/08/2016 0453 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    4.0     DATE: 05/08/2016 0600 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    4.1     DATE: 08/08/2016 0600 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    4.2     DATE: 12/08/2016 0730 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    5.0     DATE: 16/08/2016 0800 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    5.1     DATE: 23/08/2016 0520 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    6.0     DATE: 25/08/2016 0220 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    7.0     DATE: 29/08/2016 0200 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    8.0     DATE: 30/08/2016 1000 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION    9.0     DATE: 06/09/2016 0600 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   10.0     DATE: 08/09/2016 0400 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   10.1     DATE: 13/09/2016 0700 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   10.2     DATE: 21/09/2016 0700 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   11.0     DATE: 27/09/2016 0700 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   11.1     DATE: 28/09/2016 0700 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   11.2     DATE: 29/09/2016 0500 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   11.3     DATE: 01/10/2016 0300 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   11.4     DATE: 04/10/2016 1100 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   12.0     DATE: 05/10/2016 0330 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   13.0     DATE: 13/10/2016 0630 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   14.0     DATE: 14/10/2016 0630 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   15.0     DATE: 18/10/2016 0630 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   16.0     DATE: 21/10/2016 0330 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   16.1     DATE: 24/10/2016 0530 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   17.0     DATE: 26/10/2016 0630 PM
    DEVELOPED BY:   ASHISH KUMAR     VERSION   17.1     DATE: 02/11/2016 0530 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   18.0     DATE: 10/11/2016 0930 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   19.0     DATE: 17/11/2016 0930 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   19.1     DATE: 22/11/2016 0930 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   19.2     DATE: 23/11/2016 0930 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   20.0     DATE: 28/11/2016 0530 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   21.0     DATE: 02/12/2016 0100 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   22.0     DATE: 07/12/2016 0500 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   23.0     DATE: 12/12/2016 0630 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   24.0     DATE: 12/19/2016 0500 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   25.0     DATE: 12/21/2016 1100 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   26.0     DATE: 12/26/2016 0800 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   27.0     DATE: 09/02/2017 0915 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   28.0     DATE: 20/02/2017 0515 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   29.0     DATE: 14/03/2017 0715 PM
	DEVELOPED BY:   ASHISH KUMAR     VERSION   30.0     DATE: 03/04/2017 0630 PM
	DEVELOPED BY:   JEEVAN KUMAR     VERSION   31.0     DATE: 08/05/2017 0755 PM
    ====================================================================================*/

    TYPE LR_PROCESS IS RECORD
    (
        LOG_ID              NUMBER(10),
        PROCESS_NAME        VARCHAR2(50),
        START_TIME          DATE,
        END_TIME            DATE,
        METRIC_START_DT     DATE,
        METRIC_END_DT       DATE,
        ERROR_DESC          VARCHAR2(2000)
    );

    L_PROCESS  LR_PROCESS;

    PROCEDURE SAVE_LOG(A_PROCESS IN LR_PROCESS)
    AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN

        INSERT INTO LOG_TABLE_METRIC
        (
            LOG_ID,PROCESS_NAME,START_TIME,END_TIME,METRIC_START_DT,METRIC_END_DT,ERROR_DESC
        )
        VALUES (SQ_LOG_TABLE_METRIC.NEXTVAL,A_PROCESS.PROCESS_NAME,A_PROCESS.START_TIME,A_PROCESS.END_TIME,A_PROCESS.METRIC_START_DT,A_PROCESS.METRIC_END_DT,A_PROCESS.ERROR_DESC);

        COMMIT;

    END;

    PROCEDURE RUN_METRIC_FOR_ALL(ASTART DATE DEFAULT TRUNC(NEXT_DAY(SYSDATE,'SUNDAY')-14),AEND DATE DEFAULT TRUNC(NEXT_DAY(SYSDATE,'SUNDAY')-8),METRIC_PRC_NM VARCHAR2 DEFAULT NULL,
    RELOAD VARCHAR2 DEFAULT NULL,DURATION VARCHAR2 DEFAULT NULL)
    AS
    BEGIN

        SET_COMP_FAC_FLAT;
        IF DURATION IS NULL THEN
                    IF (RELOAD IS NULL OR RELOAD='TRUE') THEN
                        LOAD_STG(ASTART,AEND);
                    END IF;

                    IF(METRIC_PRC_NM IS NOT NULL) THEN
                        BEGIN
                                INSERT INTO SITE_METRIC_TMP
                                SELECT * FROM SITE_METRIC WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
                                COMMIT;
                                FOR I IN (SELECT REGEXP_SUBSTR(METRIC_PRC_NM,'[^,]+', 1, LEVEL) VAL FROM DUAL
                                            CONNECT BY REGEXP_SUBSTR(METRIC_PRC_NM, '[^,]+', 1, LEVEL) IS NOT NULL)
                                LOOP
                                SET_UPDATE_METRIC(ASTART,AEND,I.VAL);
                                END LOOP;

                                SET_DELETE_METRICS(ASTART,AEND);
                                SET_PUSH_METRICS();
                                SET_DISCARD_2YEARS_OLD();
                        END;

                    ELSE
					INSERT INTO SITE_METRIC_TMP
                                SELECT * FROM SITE_METRIC WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
                                COMMIT;
                        METRIC_COMPUTATION(ASTART,AEND);
                    END IF;
        ELSE
        SEQUENTIAL_RUN(AEND,DURATION,METRIC_PRC_NM);
        END IF;

    END;

    PROCEDURE SET_DELETE_METRICS( ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET_DELETE_METRICS';
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM SITE_METRIC WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);
    END;

    PROCEDURE SET_DISCARD_2YEARS_OLD
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET_DISCARD_2YEARS_OLD';
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM SITE_METRIC WHERE METRIC_DATE < TO_CHAR(ADD_MONTHS(SYSDATE, -24),'DD-MON-YYYY');
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SEQUENTIAL_RUN(REV_START_DT DATE,DURATION VARCHAR2,METRIC_PRC_NM VARCHAR2 DEFAULT NULL) IS
    PREVIOUS_DATE DATE;
    NEXT_DATE DATE :=REV_START_DT;
    BEGIN
        FOR I IN 1..TO_NUMBER(DURATION) LOOP
            PREVIOUS_DATE:=(NEXT_DATE-27);
            LOAD_STG(PREVIOUS_DATE,NEXT_DATE);
            SET_COMP_FAC_FLAT;
            L_PROCESS.PROCESS_NAME := 'RUNNING SEQUENTIALY';
            L_PROCESS.METRIC_START_DT := PREVIOUS_DATE;
            L_PROCESS.METRIC_END_DT := NEXT_DATE;
            SAVE_LOG(L_PROCESS);

            IF(METRIC_PRC_NM IS NOT NULL) THEN
                            INSERT INTO SITE_METRIC_TMP
                            SELECT * FROM SITE_METRIC WHERE TRUNC(METRIC_DATE) BETWEEN PREVIOUS_DATE AND NEXT_DATE;
                            COMMIT;
                                BEGIN
                                    FOR J IN (SELECT REGEXP_SUBSTR(METRIC_PRC_NM,'[^,]+', 1, LEVEL) VAL FROM DUAL
                                               CONNECT BY REGEXP_SUBSTR(METRIC_PRC_NM, '[^,]+', 1, LEVEL) IS NOT NULL)
                                    LOOP
                                    SET_UPDATE_METRIC(PREVIOUS_DATE,NEXT_DATE,J.VAL);
                                    END LOOP;
                                END;
                                SET_DELETE_METRICS(PREVIOUS_DATE,NEXT_DATE);
                                SET_PUSH_METRICS();
            ELSE
			INSERT INTO SITE_METRIC_TMP
                            SELECT * FROM SITE_METRIC WHERE TRUNC(METRIC_DATE) BETWEEN PREVIOUS_DATE AND NEXT_DATE;
                            COMMIT;
                METRIC_COMPUTATION(PREVIOUS_DATE,NEXT_DATE);
            END IF;
        NEXT_DATE:=PREVIOUS_DATE-1;

        END LOOP;
    END;

    PROCEDURE METRIC_COMPUTATION(ASTART DATE,AEND DATE)
    AS
    BEGIN

        --SET_COMP_FAC_FLAT(); ** UA data is deleting from site_metric , altered on 8th may 2017.
        SET_PM_QUALITY_UNITS(ASTART,AEND);
        SET_DNTM_HRS_PER_RTE_UNITS(ASTART,AEND);
        SET_DOWN_IN_YARD_UNITS(ASTART,AEND);
        SET_DOWN_ON_ROUTE_UNITS(ASTART,AEND);
        SET_DNTM_HRS_PER_CSI_UNITS(ASTART ,AEND);
        SET_CSIS_BTWN_PMS_UNITS(ASTART,AEND);
        SET_PM_EFFICIENCY_UNITS(ASTART,AEND);
        SET_DIRECT_HRS_TECHS(ASTART,AEND);
        SET_TECHNICIAN_HRS_TECHS(ASTART,AEND);
		--SET_NUMBER_OF_WEEKLY_ROUTES(ASTART,AEND); **Call SET_DNTM_HRS_PER_RTE_UNITS procedure for Route metric as it has dependency on Dwntm Hrs, Altered on Mar,17, 2017.
		SET_NUMBER_OF_TECH(ASTART,AEND);
		SET_SRT_VS_ACT_JOB_UNITS(ASTART,AEND);
        SET_VISITS_BTWN_PMI_UNITS(ASTART,AEND);
		SET_BACKLOG_TRUCK_UNITS(ASTART,AEND);
        SET_DELETE_METRICS(ASTART,AEND);
        SET_PUSH_METRICS();
        SET_DISCARD_2YEARS_OLD();

    END;

    PROCEDURE SET_PUSH_METRICS
    AS
        CNT NUMBER;

    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET_PUSH_METRICS';
        L_PROCESS.START_TIME := SYSDATE;

        SELECT COUNT(*) INTO CNT FROM SITE_METRIC_TMP;

        IF CNT > 0 THEN
            INSERT INTO SITE_METRIC (SELECT * FROM SITE_METRIC_TMP);
        END IF;

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_COMP_FAC_FLAT
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'RELOAD COMP_FAC_FLAT';
        L_PROCESS.START_TIME := SYSDATE;

        EXECUTE IMMEDIATE 'TRUNCATE TABLE COMP_FAC_FLAT';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE SITE_METRIC_TMP';

        INSERT INTO COMP_FAC_FLAT
        SELECT DISTINCT FAC_IDU FROM MSDO_DASH_ADMIN.CORPDB WHERE FAC_IDU  LIKE 'S%';
        COMMIT;
        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE LOAD_STG(ASTART DATE,AEND DATE) IS

        /*--*******************************************
        * BRINGING THE DATA TO LOCAL STG TABLES       *
        * DATA WILL RESIDE IN STG UNTILL NEXT RUN     *
        **--*******************************************/
    BEGIN

        EXECUTE IMMEDIATE 'TRUNCATE TABLE ACC_LAB_CHG_CAN_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE WORK_REQ_CAN_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE O_JOB_CAN_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE O_WO_CAN_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE UNIT_DEPT_COMP_MAIN_CAN_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE STD_LABOR_CAN_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE WORK_OCCURANCE_CAN_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE ACC_LAB_CHG_USA_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE WORK_REQ_USA_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE O_JOB_USA_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE O_WO_USA_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE UNIT_DEPT_COMP_MAIN_USA_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE STD_LABOR_USA_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE WORK_OCCURANCE_USA_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE ODT_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE PRO_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE O_LABOR_CHG_CAN_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE EMP_MAIN_CAN_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE O_LABOR_CHG_USA_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE EMP_MAIN_USA_STG';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE VIEW_ODT_COMP_ACTV_STG';
		EXECUTE IMMEDIATE 'TRUNCATE TABLE COLL_TRK_STG';

        L_PROCESS.PROCESS_NAME := 'LOADING ACC_LAB_CHG_CAN_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO ACC_LAB_CHG_CAN_STG(START_TIME,LOCATION,DURATION,IND_ACCT,EMP_ID)
        SELECT START_TIME,LOCATION,DURATION,IND_ACCT,EMP_ID FROM M5CAN.ACC_LAB_CHG ALC
        INNER JOIN COMP_FAC_FLAT C ON ALC.LOCATION=C.FAC_IDU
        WHERE TRUNC(START_TIME) BETWEEN ASTART AND AEND ;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING O_JOB_CAN_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO O_JOB_CAN_STG(COMPLETED_DT,ACT_COMM_COST_DO,ACT_PART_COST_DO,ACT_LABOR_COST_DO,LABOR_HRS,WO_NO,JOB,ACT_LABOR_HRS,OPEN_DT,
        COMPANY,STATUS,JOB_REASON,LOCATION,WORK_REQ_NO,JOB_ID,U_SYSTEM,COMPONENT)
        SELECT COMPLETED_DT,ACT_COMM_COST_DO,ACT_PART_COST_DO,ACT_LABOR_COST_DO,LABOR_HRS,WO_NO,JOB,ACT_LABOR_HRS,OPEN_DT,COMPANY,STATUS,JOB_REASON,LOCATION,WORK_REQ_NO,JOB_ID,
        U_SYSTEM,COMPONENT
        FROM M5CAN.O_JOB WS JOIN COMP_FAC_FLAT F ON F.FAC_IDU = WS.LOCATION WHERE TRUNC(COMPLETED_DT) BETWEEN ASTART AND AEND OR TRUNC(OPEN_DT) BETWEEN ASTART AND AEND;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING O_WO_CAN_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO O_WO_CAN_STG(LOCATION,WO_NO,UNIT_ID,STATUS,COMPANY,OPEN_DT,COMPLETED_DT,USING_DEPT_NO)
        SELECT DISTINCT WO.LOCATION,WO.WO_NO,WO.UNIT_ID,WO.STATUS,WO.COMPANY,WO.OPEN_DT,WO.COMPLETED_DT,USING_DEPT_NO
        FROM O_JOB_CAN_STG J INNER JOIN M5CAN.VIEW_O_WO WO
        ON J.WO_NO=WO.WO_NO;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING WORK_REQ_CAN_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO WORK_REQ_CAN_STG(CREATE_DT,UNIT_ID,COMPANY,WORK_REQ_NO)
        SELECT CREATE_DT,UNIT_ID,COMPANY,WORK_REQ_NO FROM M5CAN.WORK_REQ
        WHERE TRUNC(CREATE_DT) BETWEEN ASTART AND AEND
        UNION
        SELECT WR.CREATE_DT,WR.UNIT_ID,WR.COMPANY,WR.WORK_REQ_NO
        FROM O_JOB_CAN_STG J INNER JOIN M5CAN.WORK_REQ WR ON J.WORK_REQ_NO=WR.WORK_REQ_NO AND WR.CREATE_DT IS NOT NULL;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING UNIT_DEPT_COMP_MAIN_CAN_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO UNIT_DEPT_COMP_MAIN_CAN_STG(COMPANY,UNIT_ID,SPEC_NO,MAINT_LOC,MCC,UNIT_NO,CLASS2,CATEGORY)
        WITH WR AS (SELECT UNIT_ID,COMPANY FROM WORK_REQ_CAN_STG UNION SELECT UNIT_ID,COMPANY FROM O_WO_CAN_STG)
        SELECT DISTINCT UNIT.COMPANY,UNIT.UNIT_ID,UNIT.SPEC_NO,UNIT.MAINT_LOC,UNIT.MCC,UNIT.UNIT_NO,UNIT.CLASS2,UNIT.CATEGORY
        FROM  WR INNER JOIN M5CAN.UNIT_DEPT_COMP_MAIN UNIT ON WR.COMPANY=UNIT.COMPANY AND WR.UNIT_ID=UNIT.UNIT_ID;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING STD_LABOR_CAN_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO STD_LABOR_CAN_STG
        SELECT DISTINCT LBR.LABOR_TIME,LBR.JOB,LBR.SPEC_NO
        FROM O_JOB_CAN_STG J INNER JOIN M5CAN.STD_LABOR LBR ON J.JOB=LBR.JOB
        INNER JOIN UNIT_DEPT_COMP_MAIN_CAN_STG UNIT ON LBR.SPEC_NO=UNIT.SPEC_NO;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING WORK_OCCURANCE_CAN_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO WORK_OCCURANCE_CAN_STG(WO_NO,LOCATION,LABOR_TIME,COMPANY,WORK_REQ_NO)
        SELECT OCC.WO_NO,OCC.LOCATION,OCC.LABOR_TIME,OCC.COMPANY,OCC.WORK_REQ_NO
        FROM WORK_REQ_CAN_STG WR INNER JOIN M5CAN.WORK_OCCURANCE OCC
        ON WR.COMPANY=OCC.COMPANY AND WR.WORK_REQ_NO=OCC.WORK_REQ_NO;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING O_LABOR_CHG_CAN_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO MSDO_DASH_ADMIN.O_LABOR_CHG_CAN_STG(WO_NO,EMP_ID,JOB_ID,END_TIME,DURATION,START_TIME)
        SELECT  LBR.WO_NO,LBR.EMP_ID,LBR.JOB_ID,LBR.END_TIME,LBR.DURATION,LBR.START_TIME
        FROM  M5CAN.O_LABOR_CHG LBR WHERE TRUNC(START_TIME) BETWEEN ASTART AND AEND;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING EMP_MAIN_CAN_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO MSDO_DASH_ADMIN.EMP_MAIN_CAN_STG(EMP_ID,EMP_NO,LOCATION)
        SELECT DISTINCT EM.EMP_ID,EM.EMP_NO,EM.LOCATION
        FROM O_LABOR_CHG_CAN_STG LBR INNER JOIN M5CAN.EMP_MAIN EM ON LBR.EMP_ID=EM.EMP_ID;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        -----------------------------------------------------------------------------------
        L_PROCESS.PROCESS_NAME := 'LOADING ACC_LAB_CHG_USA_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO ACC_LAB_CHG_USA_STG(START_TIME,LOCATION,DURATION,IND_ACCT,EMP_ID)
        SELECT START_TIME,LOCATION,DURATION,IND_ACCT,EMP_ID FROM M5USA.ACC_LAB_CHG ALC
        INNER JOIN COMP_FAC_FLAT C ON ALC.LOCATION=C.FAC_IDU
        WHERE TRUNC(START_TIME) BETWEEN ASTART AND AEND;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING O_JOB_USA_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO O_JOB_USA_STG(COMPLETED_DT,ACT_COMM_COST_DO,ACT_PART_COST_DO,ACT_LABOR_COST_DO,LABOR_HRS,WO_NO,JOB,ACT_LABOR_HRS,OPEN_DT,
        COMPANY,STATUS,JOB_REASON,LOCATION,WORK_REQ_NO,JOB_ID,U_SYSTEM,COMPONENT)
        SELECT COMPLETED_DT,ACT_COMM_COST_DO,ACT_PART_COST_DO,ACT_LABOR_COST_DO,LABOR_HRS,WO_NO,JOB,ACT_LABOR_HRS,OPEN_DT,COMPANY,STATUS,JOB_REASON,LOCATION,WORK_REQ_NO,JOB_ID,
        U_SYSTEM,COMPONENT
        FROM M5USA.O_JOB WS INNER JOIN COMP_FAC_FLAT F ON F.FAC_IDU = WS.LOCATION WHERE TRUNC(COMPLETED_DT) BETWEEN ASTART AND AEND OR TRUNC(OPEN_DT) BETWEEN ASTART AND AEND;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING O_WO_USA_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO O_WO_USA_STG(LOCATION,WO_NO,UNIT_ID,STATUS,COMPANY,OPEN_DT,COMPLETED_DT,USING_DEPT_NO)
        SELECT DISTINCT WO.LOCATION,WO.WO_NO,WO.UNIT_ID,WO.STATUS,WO.COMPANY,WO.OPEN_DT,WO.COMPLETED_DT,USING_DEPT_NO
        FROM O_JOB_USA_STG J INNER JOIN M5USA.VIEW_O_WO WO
        ON J.WO_NO=WO.WO_NO;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING WORK_REQ_USA_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO WORK_REQ_USA_STG(CREATE_DT,UNIT_ID,COMPANY,WORK_REQ_NO)
        SELECT CREATE_DT,UNIT_ID,COMPANY,WORK_REQ_NO FROM M5USA.WORK_REQ
        WHERE TRUNC(CREATE_DT) BETWEEN ASTART AND AEND
        UNION
        SELECT WR.CREATE_DT,WR.UNIT_ID,WR.COMPANY,WR.WORK_REQ_NO
        FROM O_JOB_USA_STG J INNER JOIN M5USA.WORK_REQ WR ON J.WORK_REQ_NO=WR.WORK_REQ_NO AND WR.CREATE_DT IS NOT NULL;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING UNIT_DEPT_COMP_MAIN_USA_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO UNIT_DEPT_COMP_MAIN_USA_STG(COMPANY,UNIT_ID,SPEC_NO,MAINT_LOC,MCC,UNIT_NO,CLASS2,CATEGORY)
        WITH WR AS (SELECT UNIT_ID,COMPANY FROM WORK_REQ_USA_STG UNION SELECT UNIT_ID,COMPANY FROM O_WO_USA_STG)
        SELECT DISTINCT UNIT.COMPANY,UNIT.UNIT_ID,UNIT.SPEC_NO,UNIT.MAINT_LOC,UNIT.MCC,UNIT.UNIT_NO,UNIT.CLASS2,UNIT.CATEGORY
        FROM  WR INNER JOIN M5USA.UNIT_DEPT_COMP_MAIN UNIT ON WR.COMPANY=UNIT.COMPANY AND WR.UNIT_ID=UNIT.UNIT_ID;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING STD_LABOR_USA_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO STD_LABOR_USA_STG
        SELECT DISTINCT LBR.LABOR_TIME,LBR.JOB,LBR.SPEC_NO
        FROM O_JOB_USA_STG J INNER JOIN M5USA.STD_LABOR LBR ON J.JOB=LBR.JOB
        INNER JOIN UNIT_DEPT_COMP_MAIN_USA_STG UNIT ON LBR.SPEC_NO=UNIT.SPEC_NO;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING WORK_OCCURANCE_USA_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO WORK_OCCURANCE_USA_STG(WO_NO,LOCATION,LABOR_TIME,COMPANY,WORK_REQ_NO)
        SELECT OCC.WO_NO,OCC.LOCATION,OCC.LABOR_TIME,OCC.COMPANY,OCC.WORK_REQ_NO
        FROM WORK_REQ_USA_STG WR INNER JOIN M5USA.WORK_OCCURANCE OCC
        ON WR.COMPANY=OCC.COMPANY AND WR.WORK_REQ_NO=OCC.WORK_REQ_NO;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING O_LABOR_CHG_USA_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO MSDO_DASH_ADMIN.O_LABOR_CHG_USA_STG(WO_NO,EMP_ID,JOB_ID,END_TIME,DURATION,START_TIME)
        SELECT  LBR.WO_NO,LBR.EMP_ID,LBR.JOB_ID,LBR.END_TIME,LBR.DURATION,LBR.START_TIME
        FROM M5USA.O_LABOR_CHG LBR WHERE TRUNC(START_TIME) BETWEEN ASTART AND AEND;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING EMP_MAIN_USA_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO MSDO_DASH_ADMIN.EMP_MAIN_USA_STG(EMP_ID,EMP_NO,LOCATION)
        SELECT DISTINCT EM.EMP_ID,EM.EMP_NO,EM.LOCATION
        FROM O_LABOR_CHG_USA_STG LBR INNER JOIN M5USA.EMP_MAIN EM ON LBR.EMP_ID=EM.EMP_ID;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        -------------------------------------------------------------------------------------------
        L_PROCESS.PROCESS_NAME := 'LOADING ODT_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO ODT_STG(SHIFT_DT,KRONOS_REG_HRS,KRONOS_OT_HRS,EMP_ID)
        SELECT KRO.SHIFT_DT,KRO.KRONOS_REG_HRS,KRO.KRONOS_OT_HRS,KRO.EMP_ID
        FROM ODT.ODT_KRONOS_HRS_AGGR1 KRO WHERE TRUNC(SHIFT_DT) BETWEEN ASTART AND AEND;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        --------------------------------------------------------------------------------------------
        L_PROCESS.PROCESS_NAME := 'LOADING PRO_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO PRO_STG(FAC_IDU,SERVICE_DT,DAILY_DETAIL_ID,ROUTE_ID,DOWN_TIME_CATEGORY_ID,DOWN_TM,UP_TM,TRUCK_ID,DOWN_TIME_REASON_ID,TRUCK_NO,ROUTE_DESC)
        WITH DTL AS
        (SELECT FAC_IDU,SERVICE_DT,DAILY_DETAIL_ID,ROUTE_ID,TRUCK_ID,BUSINESS_TYPE_ID FROM PRO.PRO_DAILY_DETAIL 
        WHERE TRUNC(SERVICE_DT) BETWEEN ASTART AND AEND)
	SELECT DTL.FAC_IDU,DTL.SERVICE_DT,DTL.DAILY_DETAIL_ID,DTL.ROUTE_ID,DT.DOWN_TIME_CATEGORY_ID,
	DT.DOWN_TM,DT.UP_TM,DTL.TRUCK_ID,DT.DOWN_TIME_REASON_ID,TRK.TRUCK_NO,RTE.ROUTE_DESC
	FROM DTL LEFT JOIN PRO.PRO_ROUTE RTE ON DTL.ROUTE_ID=RTE.ROUTE_ID
	LEFT JOIN PRO.PRO_TRUCK TRK ON DTL.TRUCK_ID = TRIM(TRK.TRUCK_ID)
	INNER JOIN PRO.PRO_DAILY_DOWN_TIME DT ON DT.DAILY_DETAIL_ID=DTL.DAILY_DETAIL_ID
	INNER JOIN PRO.PRO_DOWN_TIME_REASON  DTR ON DTR.DOWN_TIME_REASON_ID = DT.DOWN_TIME_REASON_ID
	INNER JOIN PRO.PRO_LINE_OF_BUSINESS PLOB ON DTL.BUSINESS_TYPE_ID = PLOB.BUSINESS_TYPE_ID
	INNER JOIN PRO.PRO_ADMIN_LOB AL ON PLOB.LOB_CD = AL.LOB_CD
	INNER JOIN msdo_dash_admin.COMP_FAC_FLAT F ON F.FAC_IDU= DTL.FAC_IDU
	WHERE LOB4_NAME NOT IN( 'Container Delivery','Port-o-Let Service','Trash Porters','Bagster');
		
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        L_PROCESS.PROCESS_NAME := 'LOADING VIEW_ODT_COMP_ACTV_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO VIEW_ODT_COMP_ACTV_STG(CURR_DT,CURR_SCORE_FLG,UNIT_ID)
        SELECT CURR_DT,CURR_SCORE_FLG,UNIT_ID
        FROM ODT_COMP_ACTV_UNIT_CURR
        WHERE    TRUNC(CURR_DT) BETWEEN ASTART AND AEND;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);
		
		L_PROCESS.PROCESS_NAME := 'LOADING COLL_TRK_STG';
        L_PROCESS.START_TIME := SYSDATE;
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;

        INSERT/*+APPEND*/ INTO COLL_TRK_STG(UNIT_NO,UNIT_ID,MA_NM,BU_ID,ACT_STATE_NM,ACT_CODE)
        SELECT DISTINCT TMAIN.UNIT_NO,TMAIN.UNIT_ID,TFAC.FAC_MA_NM,TFAC.FAC_BUS_UNIT_IDU,TFAC.ACTUAL_STATE_NM, 
	TMAIN.ACT_CODE
	FROM M5CAN.UNIT_MAIN TMAIN,
	M5CAN.VIEW_UDC_MAIN UMAIN,
	WMAPPS.RDN_FAC_FULL TFAC
	WHERE
	TMAIN.USING_DEPT_NO = TFAC.FAC_IDU(+)
	AND TMAIN.UNIT_ID = UMAIN.UNIT_ID(+)
	AND TMAIN.UNIT_TYPE = 'U' 
	AND TMAIN.CLASS2 IN ('COLL')
	AND UMAIN.CATEGORY_CLASS IN ('COLL')
	AND (TMAIN.USING_DEPT_NO NOT LIKE '%WMRA%')
	UNION
	SELECT DISTINCT TMAIN.UNIT_NO,TMAIN.UNIT_ID,TFAC.FAC_MA_NM,TFAC.FAC_BUS_UNIT_IDU,TFAC.ACTUAL_STATE_NM, 
	TMAIN.ACT_CODE
	FROM M5USA.UNIT_MAIN TMAIN,
	M5USA.VIEW_UDC_MAIN UMAIN,
	WMAPPS.RDN_FAC_FULL TFAC
	WHERE
	TMAIN.USING_DEPT_NO = TFAC.FAC_IDU(+)
	AND TMAIN.UNIT_ID = UMAIN.UNIT_ID(+)
	AND TMAIN.UNIT_TYPE = 'U' 
	AND TMAIN.CLASS2 IN ('COLL')
	AND UMAIN.CATEGORY_CLASS IN ('COLL')
	AND (TMAIN.USING_DEPT_NO NOT LIKE '%CAN%' AND TMAIN.USING_DEPT_NO NOT LIKE '%WMRA%');

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        DBMS_STATS.GATHER_SCHEMA_STATS (
        OWNNAME =>'MSDO_DASH_ADMIN',
        DEGREE=>8,
        CASCADE=>TRUE,
        OPTIONS=>'GATHER AUTO');

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);


    END LOAD_STG;
	
	PROCEDURE SET_NUMBER_OF_WEEKLY_ROUTES(ASTART DATE,AEND DATE)
	AS
	BEGIN
	
	L_PROCESS.PROCESS_NAME := 'SET NUMBER_OF_WEEKLY_ROUTES';
    L_PROCESS.METRIC_START_DT := ASTART;
    L_PROCESS.METRIC_END_DT := AEND;
    L_PROCESS.START_TIME := SYSDATE;
	
	UPDATE SITE_METRIC_TMP SET WEEKLY_ROUTES=NULL WHERE METRIC_DATE BETWEEN ASTART AND AEND;
	COMMIT;
	
	MERGE INTO SITE_METRIC_TMP A
        USING (
        SELECT FAC_IDU,TRUNC(DATA_DT) METRIC_DATE,SUM(TOTAL_ROUTES) WEEKLY_ROUTES FROM PMT_ROUTES WHERE ROLLUP_TYPE='W' 
		AND TRUNC(DATA_DT) BETWEEN ASTART AND AEND
		AND FAC_IDU IN (SELECT DISTINCT FAC_IDU FROM SITE_METRIC_TMP WHERE DOWNTIME_HRS>0)
		GROUP BY FAC_IDU,TRUNC(DATA_DT)
        ) B
        ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)

        WHEN MATCHED THEN
        UPDATE SET A.WEEKLY_ROUTES=B.WEEKLY_ROUTES

        WHEN NOT MATCHED THEN
        INSERT (A.FAC_IDU,A.METRIC_DATE,A.WEEKLY_ROUTES)
        VALUES (B.FAC_IDU,B.METRIC_DATE,B.WEEKLY_ROUTES);

        COMMIT;
		
		DELETE FROM PMT_ROUTES WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(DATA_DT))>24;
		COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);


    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;
	
	PROCEDURE SET_NUMBER_OF_TECH(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET NUMBER_OF_TECH';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A 
        USING ( SELECT LOCATION AS FAC_IDU,
          TRUNC (METRIC_DATE, 'day')+6  AS METRIC_DATE,
         COUNT (DISTINCT TECHS) AS TECH
		FROM (SELECT T.LOCATION, T.EMPLID TECHS, CAL.DT METRIC_DATE
            FROM MSDO_DASH_ADMIN.SITE_EMP T, MSDO_DASH_ADMIN.COMP_FAC_FLAT F,
                 (    SELECT ASTART + LEVEL - 1 DT
                        FROM DUAL
                  CONNECT BY LEVEL < (TRUNC (AEND) - TRUNC(ASTART)) + 2) CAL
           WHERE   CASE WHEN TRUNC (T.EFFDT)=AEND+1 THEN AEND ELSE TRUNC(EFFDT) END <= TRUNC (CAL.DT)
                 AND (   T.LAST_DATE_WORKED IS NULL OR TRUNC (T.LAST_DATE_WORKED) >= TRUNC (CAL.DT))
                 AND T.VALID_FLG = 'Y' AND F.FAC_IDU=T.LOCATION)                
		GROUP BY LOCATION, TRUNC (METRIC_DATE, 'day')
                ) BB
        ON (A.FAC_IDU = BB.FAC_IDU AND A.METRIC_DATE=BB.METRIC_DATE)
		WHEN MATCHED THEN
            UPDATE SET  A.TECH=BB.TECH
        WHEN NOT MATCHED THEN
           INSERT (A.FAC_IDU,A.TECH,A.METRIC_DATE)
           VALUES (BB.FAC_IDU,BB.TECH,BB.METRIC_DATE);
 
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;
	
	
     PROCEDURE SET_PM_QUALITY(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET PM_QUALITY';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (
        SELECT TRUNC(METRIC_DATE) METRIC_DATE,FAC_IDU,SUM(JOBS) JOBS,SUM(SCHEDULED_JOBS) SCHEDULED_JOBS,SUM(INSPECT_JOBS) INSPECT_JOBS,
        SUM(PM_JOBS) PM_JOBS,SUM(ROUTINE_JOBS) ROUTINE_JOBS,SUM(OIL_JOBS) OIL_JOBS,SUM(QCI_JOBS) QCI_JOBS,SUM(PM_ROUTINE) PM_ROUTINE,SUM(DVIR) DVIR
        FROM MSDO_DASH_ADMIN.PM_QUALITY_UNITS
        WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND
        GROUP BY TRUNC(METRIC_DATE),FAC_IDU
        ) B
        ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)

        WHEN MATCHED THEN
        UPDATE SET A.JOBS=B.JOBS,A.SCHEDULED_JOBS=B.SCHEDULED_JOBS,A.INSPECT_JOBS=B.INSPECT_JOBS,A.PM_JOBS=B.PM_JOBS,A.OIL_JOBS=B.OIL_JOBS,
        A.ROUTINE_JOBS=B.ROUTINE_JOBS,A.QCI_JOBS=B.QCI_JOBS,A.PM_ROUTINE=B.PM_ROUTINE,A.DVIR=B.DVIR

        WHEN NOT MATCHED THEN
        INSERT (A.FAC_IDU,A.METRIC_DATE,A.JOBS,A.SCHEDULED_JOBS,A.INSPECT_JOBS,A.PM_JOBS,A.OIL_JOBS,A.ROUTINE_JOBS,A.QCI_JOBS,A.PM_ROUTINE,A.DVIR)
        VALUES (B.FAC_IDU,B.METRIC_DATE,B.JOBS,B.SCHEDULED_JOBS,B.INSPECT_JOBS,B.PM_JOBS,B.OIL_JOBS,B.ROUTINE_JOBS,B.QCI_JOBS,B.PM_ROUTINE,B.DVIR);

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);


    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;
	
	
    PROCEDURE SET_PM_EFFICIENCY(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET PM_EFFICIENCY';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (
        SELECT TRUNC(METRIC_DATE) METRIC_DATE,FAC_IDU,COUNT(TOTAL_PMS) TOTAL_PMS,SUM(CURRENT_PMS) CURRENT_PMS
        FROM MSDO_DASH_ADMIN.PM_EFFICIENCY_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND
        GROUP BY TRUNC(METRIC_DATE),FAC_IDU
        ) B
        ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)
        WHEN MATCHED THEN
        UPDATE SET A.CURRENT_PMS = B.CURRENT_PMS,A.TOTAL_PMS = B.TOTAL_PMS
        WHEN NOT MATCHED THEN
        INSERT(A.FAC_IDU,A.METRIC_DATE,A.CURRENT_PMS,A.TOTAL_PMS)
        VALUES(B.FAC_IDU,B.METRIC_DATE,B.CURRENT_PMS,B.TOTAL_PMS);
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_VISITS_BTWN_PMI_SITE(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET VISITS_BTWN_PMI_SITE';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (
        SELECT TRUNC(METRIC_DATE) METRIC_DATE,FAC_IDU,SUM(TOTAL_WO) AS TOTAL_WO,SUM(PM_WO) AS PM_WO,SUM(EX_WO) AS EX_WO
        FROM MSDO_DASH_ADMIN.VISITS_BTWN_PMI_UNITS
        WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND
        GROUP BY TRUNC(METRIC_DATE),FAC_IDU
            ) B
            ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)
        WHEN MATCHED THEN
        UPDATE SET A.TOTAL_WO = B.TOTAL_WO,A.PM_WO=B.PM_WO,A.EX_WO=B.EX_WO
        WHEN NOT MATCHED THEN
        INSERT (A.FAC_IDU,A.METRIC_DATE,A.TOTAL_WO,A.PM_WO,A.EX_WO)
        VALUES (B.FAC_IDU,B.METRIC_DATE,B.TOTAL_WO,B.PM_WO,B.EX_WO);

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    
    PROCEDURE SET_DNTM_HRS_PER_CSI_SITE(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET DNTM_HRS_PER_CSI_SITE';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (
        SELECT TRUNC(METRIC_DATE) METRIC_DATE,FAC_IDU,SUM(CSIS) CSIS,SUM(CSI_YARD) CSI_YARD,SUM(CSI_ROUTE) CSI_ROUTE
        FROM MSDO_DASH_ADMIN.DNTM_HRS_PER_CSI_UNITS
        WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND
        GROUP BY TRUNC(METRIC_DATE),FAC_IDU
            ) B
            ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)
        WHEN MATCHED THEN
        UPDATE SET A.CSIS = B.CSIS,A.CSI_YARD=B.CSI_YARD,A.CSI_ROUTE=B.CSI_ROUTE
        WHEN NOT MATCHED THEN
        INSERT (A.FAC_IDU,A.METRIC_DATE,A.CSIS,A.CSI_YARD,A.CSI_ROUTE)
        VALUES (B.FAC_IDU,B.METRIC_DATE,B.CSIS,B.CSI_YARD,B.CSI_ROUTE);

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_DNTM_HRS_PER_RTE_SITE(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET DNTM_HRS_PER_RTE_SITE';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (
        SELECT TRUNC(METRIC_DATE) METRIC_DATE,FAC_IDU,SUM(DOWNTIME_HRS) DOWNTIME_HRS
        FROM MSDO_DASH_ADMIN.DNTM_HRS_PER_RTE_UNITS
        WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND
        GROUP BY TRUNC(METRIC_DATE),FAC_IDU
            ) B
            ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)
        WHEN MATCHED THEN
        UPDATE SET A.DOWNTIME_HRS = B.DOWNTIME_HRS
        WHEN NOT MATCHED THEN
        INSERT (A.FAC_IDU,A.METRIC_DATE,A.DOWNTIME_HRS)
        VALUES (B.FAC_IDU,B.METRIC_DATE,B.DOWNTIME_HRS);

        COMMIT;

         L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);
		
		SET_NUMBER_OF_WEEKLY_ROUTES(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);
		
		
    END;

    PROCEDURE SET_DOWN_ON_ROUTE_SITE(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET DOWN_ON_ROUTE_SITE';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (
        SELECT TRUNC(METRIC_DATE) METRIC_DATE,FAC_IDU,SUM(DOWN_ON_ROUTE_HRS) DOWN_ON_ROUTE_HRS
        FROM MSDO_DASH_ADMIN.DOWN_ON_ROUTE_UNITS
        WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND
        GROUP BY TRUNC(METRIC_DATE),FAC_IDU
            ) B
            ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)
        WHEN MATCHED THEN
        UPDATE SET A.DOWN_ON_ROUTE_HRS = B.DOWN_ON_ROUTE_HRS
        WHEN NOT MATCHED THEN
        INSERT (A.FAC_IDU,A.METRIC_DATE,A.DOWN_ON_ROUTE_HRS)
        VALUES (B.FAC_IDU,B.METRIC_DATE,B.DOWN_ON_ROUTE_HRS);

        COMMIT;

         L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_DOWN_IN_YARD_SITE(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET DOWN_IN_YARD_SITE';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (
        SELECT TRUNC(METRIC_DATE) METRIC_DATE,FAC_IDU,SUM(DOWN_IN_YARD_HRS) DOWN_IN_YARD_HRS
        FROM MSDO_DASH_ADMIN.DOWN_IN_YARD_UNITS
        WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND
        GROUP BY TRUNC(METRIC_DATE),FAC_IDU
            ) B
            ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)
        WHEN MATCHED THEN
        UPDATE SET A.DOWN_IN_YARD_HRS = B.DOWN_IN_YARD_HRS
        WHEN NOT MATCHED THEN
        INSERT (A.FAC_IDU,A.METRIC_DATE,A.DOWN_IN_YARD_HRS)
        VALUES (B.FAC_IDU,B.METRIC_DATE,B.DOWN_IN_YARD_HRS);

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_TECHNICIAN_HRS_SITE(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET TECHNICIAN_HRS_SITE';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (SELECT FAC_IDU,TRUNC(METRIC_DATE) METRIC_DATE,SUM(KRONOS_REG_HRS) KRONOS_REG_HRS,SUM(KRONOS_OT_HRS) KRONOS_OT_HRS
        FROM MSDO_DASH_ADMIN.TECHNICIAN_HRS
        WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND
        GROUP BY TRUNC(METRIC_DATE),FAC_IDU
            ) B
            ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)
        WHEN MATCHED THEN
        UPDATE SET A.KRONOS_OT_HRS = B.KRONOS_OT_HRS,A.KRONOS_REG_HRS = B.KRONOS_REG_HRS
        WHEN NOT MATCHED THEN
        INSERT (A.FAC_IDU,A.METRIC_DATE,A.KRONOS_OT_HRS,A.KRONOS_REG_HRS)
        VALUES (B.FAC_IDU,B.METRIC_DATE,B.KRONOS_OT_HRS,B.KRONOS_REG_HRS);

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_SRT_VS_ACT_JOB(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET SET_SRT_VS_ACT_JOB';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (
                    SELECT FAC_IDU,METRIC_DATE,SUM(TOT_JOBS_X3RDPARTY) TOT_JOBS_X3RDPARTY,
                    SUM(SRT_JOBS_X3RDPARTY) SRT_JOBS_X3RDPARTY,
                    SUM(INRANGE) INRANGE
                    FROM MSDO_DASH_ADMIN.SRT_VS_ACT_WITH_JOB_PCT_UNITS
                    WHERE METRIC_DATE BETWEEN ASTART AND AEND
                    GROUP BY METRIC_DATE,FAC_IDU
        ) B
        ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)
        WHEN MATCHED THEN
        UPDATE SET  A.TOT_JOBS_X3RDPARTY = B.TOT_JOBS_X3RDPARTY,
                    A.SRT_JOBS_X3RDPARTY = B.SRT_JOBS_X3RDPARTY,
                    A.INRANGE = B.INRANGE
        WHEN NOT MATCHED THEN
        INSERT(A.FAC_IDU,A.METRIC_DATE,A.TOT_JOBS_X3RDPARTY,A.SRT_JOBS_X3RDPARTY,A.INRANGE)
        VALUES(B.FAC_IDU,B.METRIC_DATE,B.TOT_JOBS_X3RDPARTY,B.SRT_JOBS_X3RDPARTY,B.INRANGE);

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_DIRECT_HRS_SITE(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET DIRECT_HRS_SITE';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (
        SELECT FAC_IDU,TRUNC(METRIC_DATE) METRIC_DATE,SUM(DIRECT_HRS) DIRECT_HRS
        FROM MSDO_DASH_ADMIN.TECHNICIAN_HRS  WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND
        GROUP BY FAC_IDU,TRUNC(METRIC_DATE)
        ) B
        ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)

        WHEN MATCHED THEN
        UPDATE SET A.DIRECT_HRS=B.DIRECT_HRS

        WHEN NOT MATCHED THEN
        INSERT (A.FAC_IDU,A.METRIC_DATE,A.DIRECT_HRS)
        VALUES (B.FAC_IDU,B.METRIC_DATE,B.DIRECT_HRS);

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;
	
	PROCEDURE SET_BACKLOG_TRUCK_SITE(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET BACKLOG_TRUCK_SITE';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        MERGE INTO SITE_METRIC_TMP A
        USING (
        SELECT FAC_IDU,TRUNC(METRIC_DATE) METRIC_DATE,AVG(BACKLOG_HRS)*SUM(BACKLOG_REQ) AS BACKLOG
        FROM MSDO_DASH_ADMIN.BACKLOG_TRUCK_UNITS  WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND
        GROUP BY FAC_IDU,TRUNC(METRIC_DATE)
        ) B
        ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)

        WHEN MATCHED THEN
        UPDATE SET A.BACKLOG=B.BACKLOG

        WHEN NOT MATCHED THEN
        INSERT (A.FAC_IDU,A.METRIC_DATE,A.BACKLOG)
        VALUES (B.FAC_IDU,B.METRIC_DATE,B.BACKLOG);

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_UPDATE_METRIC(ASTART DATE, AEND DATE, METRIC_PRC_NM VARCHAR2)
    AS
    BEGIN

        /* Call SET_DNTM_HRS_PER_RTE_UNITS proc for Weekly Routes as it has dependency..
		IF METRIC_PRC_NM='1'  THEN
            BEGIN
                 SET_NUMBER_OF_WEEKLY_ROUTES(ASTART,AEND);
            END;
        END IF;*/

        IF METRIC_PRC_NM='1'  THEN
        BEGIN

            SET_PM_QUALITY_UNITS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='2'  THEN
        BEGIN

            SET_DNTM_HRS_PER_RTE_UNITS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='3'  THEN
        BEGIN

            SET_DOWN_IN_YARD_UNITS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='4'  THEN
        BEGIN

           SET_DOWN_ON_ROUTE_UNITS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='5'  THEN
        BEGIN

            SET_DNTM_HRS_PER_CSI_UNITS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='6'  THEN
        BEGIN

            SET_VISITS_BTWN_PMI_UNITS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='7'  THEN
        BEGIN

            SET_CSIS_BTWN_PMS_UNITS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='8'  THEN
        BEGIN

            SET_SRT_VS_ACT_JOB_UNITS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='9'  THEN
        BEGIN

            SET_PM_EFFICIENCY_UNITS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='10'  THEN
        BEGIN

            SET_BACKLOG_TRUCK_UNITS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='11'  THEN
        BEGIN

            SET_DIRECT_HRS_TECHS(ASTART,AEND);

        END;
        END IF;

        IF METRIC_PRC_NM='12'  THEN
        BEGIN

            SET_TECHNICIAN_HRS_TECHS(ASTART,AEND);

        END;
        END IF;
		
		IF METRIC_PRC_NM='13' THEN
		BEGIN
		
			SET_NUMBER_OF_TECH(ASTART,AEND);
		
		END;
		END IF;	
		
		
    END;

   PROCEDURE SET_PM_QUALITY_UNITS(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET PM_QUALITY_UNITS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM PM_QUALITY_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
        COMMIT;


        INSERT INTO PM_QUALITY_UNITS(FAC_IDU,UNIT_ID,JOBS,INSPECT_JOBS,PM_JOBS,ROUTINE_JOBS,METRIC_DATE,SCHEDULED_JOBS,OIL_JOBS,QCI_JOBS,PM_ROUTINE,DVIR)
        (SELECT WS.LOCATION, U.UNIT_NO UNIT_ID,COUNT(1) AS JOBS,
           SUM(CASE WHEN WS.JOB_REASON = '6' OR WS.JOB_REASON='2' THEN 1 ELSE 0 END) AS INSPECT_JOBS,
           SUM(CASE WHEN WS.JOB_REASON='A' THEN 1 ELSE 0 END) AS PM_JOBS,
           SUM(CASE WHEN WS.JOB_REASON='7' OR WS.JOB LIKE '32-018%' THEN 1 ELSE 0 END) AS ROUTINE_JOBS,
           TRUNC(WS.COMPLETED_DT) AS METRIC_DATE,
           SUM(CASE WHEN (ROUND(WS.COMPLETED_DT-WR.CREATE_DT)*24)>12 AND JOB_REASON NOT IN('A','7') AND JOB NOT LIKE '32-018%' THEN 1 ELSE 0 END) AS SCHEDULED_JOBS,
           SUM(CASE WHEN WS.JOB = '06-0PM-OIL' AND WS.JOB_REASON <> 'A' THEN 1 ELSE 0 END) AS OIL_JOBS,
           SUM(CASE WHEN WS.JOB LIKE '%QCI%' THEN 1 ELSE 0 END) AS QCI_JOBS,
           SUM(CASE WHEN WS.JOB_REASON IN ('A', '7') 
           AND (WS.COMPLETED_DT) BETWEEN ASTART AND AEND THEN 1 ELSE 0 END) AS PM_ROUTINE,
           SUM(CASE WHEN WS.JOB_REASON IN ('5')
           AND (WS.COMPLETED_DT) BETWEEN ASTART AND AEND THEN 1 ELSE 0 END) AS DVIR
        FROM   MSDO_DASH_ADMIN.O_JOB_USA_STG WS INNER JOIN MSDO_DASH_ADMIN.O_WO_USA_STG O
        ON     WS.WO_NO = O.WO_NO INNER JOIN MSDO_DASH_ADMIN.UNIT_DEPT_COMP_MAIN_USA_STG U
        ON     O.UNIT_ID = U.UNIT_ID
        LEFT JOIN MSDO_DASH_ADMIN.WORK_REQ_USA_STG WR ON WS.WORK_REQ_NO = WR.WORK_REQ_NO
        WHERE  TRUNC(WS.COMPLETED_DT) BETWEEN ASTART AND AEND
        AND    WS.STATUS = 'DON'
        AND    O.STATUS <> 'X'
        AND    O.WO_NO <> ' '
        AND    U.CLASS2 = 'COLL'
        AND    U.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
        GROUP BY WS.LOCATION,TRUNC(WS.COMPLETED_DT),U.UNIT_NO
        UNION
        SELECT WS.LOCATION, U.UNIT_NO UNIT_ID,COUNT(1) AS JOBS,
           SUM(CASE WHEN WS.JOB_REASON = '6' OR WS.JOB_REASON='2' THEN 1 ELSE 0 END) AS INSPECT_JOBS,
           SUM(CASE WHEN WS.JOB_REASON='A' THEN 1 ELSE 0 END) AS PM_JOBS,
           SUM(CASE WHEN WS.JOB_REASON='7' OR WS.JOB LIKE '32-018%' THEN 1 ELSE 0 END) AS ROUTINE_JOBS,
           TRUNC(WS.COMPLETED_DT) AS METRIC_DATE,
           SUM(CASE WHEN (ROUND(WS.COMPLETED_DT-WR.CREATE_DT)*24)>12 AND JOB_REASON NOT IN('A','7') AND JOB NOT LIKE '32-018%' THEN 1 ELSE 0 END) AS SCHEDULED_JOBS,
           SUM(CASE WHEN WS.JOB = '06-0PM-OIL' AND WS.JOB_REASON <> 'A' THEN 1 ELSE 0 END) AS OIL_JOBS,
           SUM(CASE WHEN WS.JOB LIKE '%QCI%' THEN 1 ELSE 0 END) AS QCI_JOBS,
           SUM(CASE WHEN WS.JOB_REASON IN ('A', '7') 
           AND (WS.COMPLETED_DT) BETWEEN ASTART AND AEND THEN 1 ELSE 0 END) AS PM_ROUTINE,
           SUM(CASE WHEN WS.JOB_REASON IN ('5')
           AND (WS.COMPLETED_DT) BETWEEN ASTART AND AEND THEN 1 ELSE 0 END) AS DVIR
        FROM   MSDO_DASH_ADMIN.O_JOB_CAN_STG WS INNER JOIN MSDO_DASH_ADMIN.O_WO_CAN_STG O
        ON     WS.WO_NO = O.WO_NO INNER JOIN MSDO_DASH_ADMIN.UNIT_DEPT_COMP_MAIN_CAN_STG U
        ON     O.UNIT_ID = U.UNIT_ID
        LEFT JOIN MSDO_DASH_ADMIN.WORK_REQ_CAN_STG WR ON WS.WORK_REQ_NO = WR.WORK_REQ_NO
        WHERE  TRUNC(WS.COMPLETED_DT) BETWEEN ASTART AND AEND
        AND    WS.STATUS = 'DON'
        AND    O.STATUS <> 'X'
        AND    O.WO_NO <> ' '
        AND    U.CLASS2 = 'COLL'
        AND    U.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
        GROUP BY WS.LOCATION,TRUNC(WS.COMPLETED_DT),U.UNIT_NO);
        COMMIT;

        DELETE FROM PM_QUALITY_UNITS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        SET_PM_QUALITY(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_DNTM_HRS_PER_RTE_UNITS(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET DNTM_HRS_PER_RTE_UNITS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM DNTM_HRS_PER_RTE_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
        COMMIT;

        INSERT INTO DNTM_HRS_PER_RTE_UNITS(FAC_IDU,UNIT_ID,ROUTE_ID, METRIC_DATE, DOWNTIME_HRS)
        (SELECT  FAC_IDU,UNIT_ID,MAX(NVL(ROUTE_ID,0)) ROUTE_ID, TRUNC(METRIC_DATE) METRIC_DATE,DOWNTIME_HRS
		FROM( SELECT DTL.FAC_IDU, TRUNC(DTL.SERVICE_DT) AS METRIC_DATE,DTL.ROUTE_DESC,TO_NUMBER(DTL.TRUCK_NO) AS UNIT_ID, 
            TO_NUMBER(DTL.ROUTE_ID) AS ROUTE_ID,
                        ( DTL.UP_TM  - DTL.DOWN_TM) * 24 AS DOWNTIME_HRS
              FROM PRO_STG DTL
			  INNER JOIN COLL_TRK_STG TRK ON DTL.TRUCK_NO=TRK.UNIT_NO
              WHERE TRUNC(DTL.SERVICE_DT) BETWEEN ASTART AND AEND
               AND DTL.DOWN_TIME_REASON_ID IS NOT NULL
			   AND TRK.BU_ID IN(SELECT BU_ID FROM DOMAPPING)
			   AND TRK.BU_ID IN (SELECT CONCAT('B',BU_ID) FROM PS_COST_BALANCE))
               GROUP BY FAC_IDU, TRUNC(METRIC_DATE) ,ROUTE_DESC,UNIT_ID,DOWNTIME_HRS 
               );

        COMMIT;

        DELETE FROM DNTM_HRS_PER_RTE_UNITS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        SET_DNTM_HRS_PER_RTE_SITE(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_DOWN_IN_YARD_UNITS(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET DOWN_IN_YARD_UNITS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM DOWN_IN_YARD_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
        COMMIT;

        INSERT INTO DOWN_IN_YARD_UNITS(FAC_IDU,UNIT_ID, METRIC_DATE,ROUTE_ID, DOWN_IN_YARD_HRS)
		(SELECT  FAC_IDU,UNIT_ID, TRUNC(METRIC_DATE) METRIC_DATE,MAX(NVL(ROUTE_ID,0)) ROUTE_ID,DOWN_IN_YARD_HRS FROM (
		SELECT FAC_IDU,ROUTE_DESC,TO_NUMBER(TRUCK_NO) AS UNIT_ID,TRUNC(SERVICE_DT) AS METRIC_DATE,ROUTE_ID,
         (CASE DOWN_TIME_CATEGORY_ID WHEN 1 THEN  (UP_TM - DOWN_TM)*24  ELSE 0 END) AS  DOWN_IN_YARD_HRS
        FROM MSDO_DASH_ADMIN.PRO_STG DTL
        INNER JOIN COLL_TRK_STG TRK
        ON DTL.TRUCK_NO=TRK.UNIT_NO
        WHERE TRUNC(SERVICE_DT) BETWEEN ASTART AND AEND
		AND DOWN_TIME_REASON_ID IS NOT NULL
		AND TRK.BU_ID IN(SELECT BU_ID FROM DOMAPPING)
		AND TRK.BU_ID IN (SELECT CONCAT('B',BU_ID) FROM PS_COST_BALANCE))
        GROUP BY FAC_IDU, TRUNC(METRIC_DATE) ,ROUTE_DESC,UNIT_ID,DOWN_IN_YARD_HRS );	
		
        COMMIT;

        DELETE FROM DOWN_IN_YARD_UNITS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        SET_DOWN_IN_YARD_SITE(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_DOWN_ON_ROUTE_UNITS(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET DOWN_ON_ROUTE_UNITS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM DOWN_ON_ROUTE_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
        COMMIT;

        INSERT INTO DOWN_ON_ROUTE_UNITS(FAC_IDU,UNIT_ID, METRIC_DATE,ROUTE_ID, DOWN_ON_ROUTE_HRS)
        (SELECT  FAC_IDU,UNIT_ID, TRUNC(METRIC_DATE) METRIC_DATE,MAX(NVL(ROUTE_ID,0)) ROUTE_ID,DOWN_ON_ROUTE_HRS FROM (
		SELECT FAC_IDU,ROUTE_DESC,TO_NUMBER(TRUCK_NO) AS UNIT_ID,TRUNC(SERVICE_DT) AS METRIC_DATE,ROUTE_ID,
        (CASE DOWN_TIME_CATEGORY_ID WHEN 2 THEN ( UP_TM  - DOWN_TM)*24  ELSE 0 END)  AS DOWN_ON_ROUTE_HRS
        FROM MSDO_DASH_ADMIN.PRO_STG DTL
        INNER JOIN COLL_TRK_STG TRK
        ON DTL.TRUCK_NO=TRK.UNIT_NO
        WHERE TRUNC(SERVICE_DT) BETWEEN ASTART AND AEND
		AND DOWN_TIME_REASON_ID IS NOT NULL
		AND TRK.BU_ID IN(SELECT BU_ID FROM DOMAPPING)
		AND TRK.BU_ID IN (SELECT CONCAT('B',BU_ID) FROM PS_COST_BALANCE))
        GROUP BY FAC_IDU, TRUNC(METRIC_DATE) ,ROUTE_DESC,UNIT_ID,DOWN_ON_ROUTE_HRS );

        COMMIT;

        DELETE FROM DOWN_ON_ROUTE_UNITS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        SET_DOWN_ON_ROUTE_SITE(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_DNTM_HRS_PER_CSI_UNITS(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET DNTM_HRS_PER_CSI_UNITS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM DNTM_HRS_PER_CSI_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
        COMMIT;

        INSERT INTO DNTM_HRS_PER_CSI_UNITS(FAC_IDU,UNIT_ID,CSIS, METRIC_DATE,DOWNTIME_HRS,CSI_YARD,CSI_ROUTE,ROUTE_ID)
        (SELECT FAC_IDU,UNIT_ID,SUM(CSIS) CSIS, TRUNC(METRIC_DATE) METRIC_DATE,
         DOWNTIME_HRS,SUM(CSI_YARD) CSI_YARD,SUM(CSI_ROUTE) CSI_ROUTE,MAX(NVL(ROUTE_ID,0))
        FROM (SELECT FAC_IDU, MAX(TRUCK_NO) AS UNIT_ID, 1 AS CSIS,TRUNC(SERVICE_DT) AS METRIC_DATE ,ROUTE_DESC,
                     MAX(UP_TM  -DOWN_TM) * 24 AS DOWNTIME_HRS,
                     MAX(CASE DOWN_TIME_CATEGORY_ID WHEN 1 THEN  1 ELSE 0 END) AS  CSI_YARD,
                     MAX(CASE DOWN_TIME_CATEGORY_ID WHEN 2 THEN  1 ELSE 0 END) AS  CSI_ROUTE,
					 MAX(DTL.ROUTE_ID) AS ROUTE_ID
        FROM PRO_STG DTL
        INNER JOIN COLL_TRK_STG TRK
        ON DTL.TRUCK_NO=TRK.UNIT_NO
              WHERE TRUNC(SERVICE_DT) BETWEEN ASTART and AEND
              AND DOWN_TIME_REASON_ID IS NOT NULL
			  AND TRK.BU_ID IN(SELECT BU_ID FROM DOMAPPING)
			  AND TRK.BU_ID IN (SELECT CONCAT('B',BU_ID) FROM PS_COST_BALANCE)
			  GROUP BY FAC_IDU, TRUNC(SERVICE_DT) ,ROUTE_DESC,(UNIT_ID),(UP_TM  -DOWN_TM) * 24)
              GROUP BY FAC_IDU, TRUNC(METRIC_DATE) ,ROUTE_DESC,(UNIT_ID),DOWNTIME_HRS); -- DOWNTIME HOURS

        COMMIT;

        DELETE FROM DNTM_HRS_PER_CSI_UNITS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;
        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        SET_DNTM_HRS_PER_CSI_SITE(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

   PROCEDURE SET_CSIS_BTWN_PMS_UNITS(ASTART DATE,AEND DATE)
AS
BEGIN

  L_PROCESS.PROCESS_NAME := 'SET CSIS_BTWN_PMS_UNITS';
  L_PROCESS.METRIC_START_DT := ASTART;
  L_PROCESS.METRIC_END_DT := AEND;
  L_PROCESS.START_TIME := SYSDATE;
  
  DELETE FROM CSIS_BTWN_PMS_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
  COMMIT;

  INSERT INTO CSIS_BTWN_PMS_UNITS(FAC_IDU, METRIC_DATE,UNIT_ID,PM_WO,CSIS)
   (SELECT CSI.FAC_IDU,
            CSI.METRIC_DATE,
            CSI.TRUCK_ID,
            NVL(PM.PM_WO,0),
            CSI.CSIS
  FROM( ( SELECT DTL.FAC_IDU,
             TRUNC(DTL.SERVICE_DT) AS METRIC_DATE,
             TO_CHAR(TRUCK_NO) TRUCK_ID,
             COUNT(1) AS CSIS
        FROM MSDO_DASH_ADMIN.PRO_STG DTL
        WHERE TRUNC(DTL.SERVICE_DT) BETWEEN ASTART AND AEND
		AND DOWN_TIME_REASON_ID IS NOT NULL
        GROUP BY DTL.FAC_IDU,  TRUNC(DTL.SERVICE_DT),TRUCK_NO) CSI
		LEFT JOIN 
		(
		SELECT LOCATION AS FAC_IDU, MAX(JOB_DATE) METRIC_DATE,UNIT_ID,COUNT(*) AS PM_WO FROM
		(SELECT J.LOCATION,  J.JOB_ID,TRUNC( O.COMPLETED_DT) AS JOB_DATE, O.WO_NO,U.UNIT_NO AS UNIT_ID
         FROM  MSDO_DASH_ADMIN.O_JOB_CAN_STG J 
         JOIN  MSDO_DASH_ADMIN.O_WO_CAN_STG O ON J.WO_NO=O.WO_NO AND TRUNC(O.COMPLETED_DT)   BETWEEN ASTART AND AEND 
         INNER JOIN  MSDO_DASH_ADMIN.UNIT_DEPT_COMP_MAIN_CAN_STG U 
         ON O.UNIT_ID = U.UNIT_ID 
         AND U.CLASS2 = 'COLL'
         AND U.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
         WHERE O.STATUS <> 'X'
		 AND( J.COMPONENT IN('PMA','PMB') OR J.JOB='06-0PM-OIL')		 
         AND TRUNC(J.COMPLETED_DT)   BETWEEN ASTART AND AEND 
         )   
         GROUP BY LOCATION,JOB_DATE,WO_NO,UNIT_ID HAVING MAX(JOB_DATE)  BETWEEN ASTART AND AEND
	UNION
		SELECT LOCATION AS FAC_IDU, MAX(JOB_DATE) METRIC_DATE,UNIT_ID,COUNT(*) AS PM_WO FROM	
		(SELECT J.LOCATION,  J.JOB_ID,TRUNC( O.COMPLETED_DT) AS JOB_DATE, O.WO_NO,U.UNIT_NO AS UNIT_ID
         FROM  MSDO_DASH_ADMIN.O_JOB_USA_STG J 
         JOIN  MSDO_DASH_ADMIN.O_WO_USA_STG O ON J.WO_NO=O.WO_NO AND TRUNC(O.COMPLETED_DT)   BETWEEN ASTART AND AEND 
         INNER JOIN  MSDO_DASH_ADMIN.UNIT_DEPT_COMP_MAIN_USA_STG U 
         ON O.UNIT_ID = U.UNIT_ID 
         AND U.CLASS2 = 'COLL'
         AND U.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
         WHERE O.STATUS <> 'X'
		 AND( J.COMPONENT IN('PMA','PMB') OR J.JOB='06-0PM-OIL')		 
         AND TRUNC(J.COMPLETED_DT)   BETWEEN ASTART AND AEND 
         )   
         GROUP BY LOCATION,JOB_DATE,WO_NO,UNIT_ID HAVING MAX(JOB_DATE) BETWEEN ASTART AND AEND) PM		
		 ON PM.FAC_IDU = CSI.FAC_IDU AND PM.METRIC_DATE=CSI.METRIC_DATE AND PM.UNIT_ID=CSI.TRUCK_ID ));
  
  COMMIT;
  
	DELETE FROM CSIS_BTWN_PMS_UNITS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
	 COMMIT;
     
  L_PROCESS.END_TIME := SYSDATE;
  SAVE_LOG(L_PROCESS);

EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    L_PROCESS.END_TIME := SYSDATE;
    L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
    SAVE_LOG(L_PROCESS);
     
END;


    PROCEDURE SET_SRT_VS_ACT_JOB_UNITS(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET SRT_VS_ACT_JOB_UNITS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM SRT_VS_ACT_WITH_JOB_PCT_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
		COMMIT;

        INSERT INTO SRT_VS_ACT_WITH_JOB_PCT_UNITS(FAC_IDU,METRIC_DATE,UNIT_ID,EMPLID,TOT_JOBS_X3RDPARTY,SRT_JOBS_X3RDPARTY,INRANGE)
        (SELECT  DISTINCT V0.FAC_IDU ,
                    TRUNC(V0.METRIC_DATE) METRIC_DATE,
                    V0.UNIT_ID,
                    NVL(V0.EMP_ID,0),
                    COUNT(V0.JOB_ID) AS NO_JOBS,
                    SUM(V0.STD_SITE) AS TOTAL_JOBS,
                    SUM(V0.PERC_IN_WINDOW) AS INRANGE
            FROM
            (
SELECT  V1.*,
                        -(NVL(V1.ACT_LABOR_HRS,0) - NVL(V1.SRT_SITE,0)) AS DIFF_SITESRT,
                        -(NVL(V1.ACT_LABOR_HRS,0) - NVL(V1.SRT_CORP,0)) AS DIFF_CORPSRT,
                        -(NVL(V1.SRT_SITE,0) - NVL(V1.SRT_CORP,0)) AS DIFF_SITE_CORP_SRT,
                        (CASE WHEN NVL(V1.SRT_SITE,0) > 0 THEN 1 ELSE 0 END) STD_SITE,
                        (CASE WHEN NVL(V1.SRT_CORP,0) > 0 THEN 1 ELSE 0 END) STD_CORP,
                        (CASE WHEN NVL(V1.SRT_SITE,0) <> 0 THEN
                        (CASE WHEN NVL(-(NVL(V1.ACT_LABOR_HRS,0) - NVL(V1.SRT_SITE,0)),0)/NVL(V1.SRT_SITE,0) BETWEEN -.10 AND .10 THEN 1 ELSE 0 END)
                        ELSE 0 END) PERC_IN_WINDOW
                FROM
                (
SELECT 
O.LOCATION AS FAC_IDU,TRUNC(J.COMPLETED_DT) AS METRIC_DATE,(SELECT DISTINCT EM.EMP_NO AS EMPLID FROM M5CAN.O_LABOR_CHG LB 
INNER JOIN M5CAN.EMP_MAIN EM ON LB.EMP_ID=EM.EMP_ID AND  LB.JOB_ID=J.JOB_ID AND LB.WO_NO = O.WO_NO
AND ROWNUM<=1
) AS EMP_ID,U.UNIT_NO AS UNIT_ID,NVL(J.LABOR_HRS,0) AS SRT_SITE,J.ACT_LABOR_HRS
,NVL(LBR.LABOR_TIME,0)/(60*60*1000) AS SRT_CORP,J.JOB_ID
FROM 
M5CAN.O_JOB J INNER JOIN M5CAN.O_WO O ON J.WO_NO=O.WO_NO
LEFT OUTER JOIN M5CAN.UNIT_DEPT_COMP_MAIN U ON U.UNIT_ID=O.UNIT_ID
INNER JOIN MSDO_DASH_ADMIN.COMP_FAC_FLAT F ON J.LOCATION=F.FAC_IDU
LEFT OUTER JOIN M5CAN.STD_LABOR LBR ON LBR.JOB=J.JOB AND LBR.SPEC_NO=U.SPEC_NO 
WHERE
(J.ACT_COMM_COST_DO=0 OR (J.ACT_COMM_COST_DO<0 AND (J.ACT_PART_COST_DO>0 OR J.ACT_LABOR_COST_DO>0))) AND 
J.STATUS='DON' AND TRUNC(J.COMPLETED_DT) BETWEEN ASTART AND AEND
AND O.STATUS ^=  'X' AND O.WO_NO^=' '
AND U.CLASS2 = 'COLL' 
AND U.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
UNION
SELECT 
O.LOCATION AS FAC_IDU,TRUNC(J.COMPLETED_DT) AS METRIC_DATE,(SELECT DISTINCT EM.EMP_NO AS EMPLID FROM M5USA.O_LABOR_CHG LB 
INNER JOIN M5USA.EMP_MAIN EM ON LB.EMP_ID=EM.EMP_ID AND  LB.JOB_ID=J.JOB_ID AND LB.WO_NO = O.WO_NO
AND ROWNUM<=1
) AS EMP_ID,U.UNIT_NO AS UNIT_ID,NVL(J.LABOR_HRS,0) AS SRT_SITE,J.ACT_LABOR_HRS
,NVL(LBR.LABOR_TIME,0)/(60*60*1000) AS SRT_CORP,J.JOB_ID
FROM 
M5USA.O_JOB J INNER JOIN M5USA.O_WO O ON J.WO_NO=O.WO_NO
LEFT OUTER JOIN M5USA.UNIT_DEPT_COMP_MAIN U ON U.UNIT_ID=O.UNIT_ID
INNER JOIN MSDO_DASH_ADMIN.COMP_FAC_FLAT F ON J.LOCATION=F.FAC_IDU
LEFT OUTER JOIN M5USA.STD_LABOR LBR ON LBR.JOB=J.JOB AND LBR.SPEC_NO=U.SPEC_NO 
WHERE
(J.ACT_COMM_COST_DO=0 OR (J.ACT_COMM_COST_DO<0 AND (J.ACT_PART_COST_DO>0 OR J.ACT_LABOR_COST_DO>0))) AND 
J.STATUS='DON' AND TRUNC(J.COMPLETED_DT) BETWEEN ASTART AND AEND
AND O.STATUS ^=  'X' AND O.WO_NO^=' '
AND U.CLASS2 = 'COLL' 
AND U.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
) V1
) V0
GROUP BY V0.FAC_IDU,TRUNC(V0.METRIC_DATE),V0.UNIT_ID,V0.EMP_ID
);

        DELETE FROM SRT_VS_ACT_WITH_JOB_PCT_UNITS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        SET_SRT_VS_ACT_JOB(ASTART,AEND);

        EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_VISITS_BTWN_PMI_UNITS(ASTART DATE,AEND DATE)
    AS
	
    BEGIN
				
        L_PROCESS.PROCESS_NAME := 'SET VISITS_BTWN_PMI_UNITS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM VISITS_BTWN_PMI_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
        COMMIT;

        INSERT INTO MSDO_DASH_ADMIN.VISITS_BTWN_PMI_UNITS(FAC_IDU,METRIC_DATE,UNIT_ID,EX_WO,PM_WO,TOTAL_WO,WO_NO)
        WITH WO_CAN_SINGLE_JOB AS
        (SELECT  WO_NO FROM  MSDO_DASH_ADMIN.O_JOB_CAN_STG WHERE STATUS='DON' GROUP BY WO_NO HAVING COUNT(*)=1),
        WO_USA_SINGLE_JOB AS
        (SELECT  WO_NO FROM  MSDO_DASH_ADMIN.O_JOB_USA_STG WHERE STATUS='DON' GROUP BY WO_NO HAVING COUNT(*)=1)
        SELECT LOCATION AS FAC_IDU, MAX(JOB_DATE) METRIC_DATE,UNIT_NO,MAX(EXCLUDED_PM) AS EX_WO, MAX(IS_PM) AS  PM_WO,
        COUNT(DISTINCT WO_NO) AS TOTAL_WO,WO_NO FROM
        (SELECT O.USING_DEPT_NO AS LOCATION,  J.JOB_ID,TRUNC( O.COMPLETED_DT) AS JOB_DATE,
        TRUNC(O.COMPLETED_DT, 'DAY')+6 AS DT_WO,TRUNC(J.COMPLETED_DT, 'DAY')+6 AS DT_JOB,
        O.WO_NO,U.UNIT_NO,
           CASE WHEN J.COMPONENT='PMA' OR J.COMPONENT='PMB'  OR J.JOB = '06-0PM-OIL' THEN 1 ELSE 0 END AS IS_PM,
           CASE WHEN (J.COMPONENT NOT IN ('PMA','PMB','OIL')  AND J.WO_NO IN (SELECT WO_NO FROM WO_CAN_SINGLE_JOB)) AND  (J.U_SYSTEM='0PM' OR JOB_REASON='7'
           OR SUBSTR(JOB,1,6)='32-018') THEN 1 ELSE 0 END AS EXCLUDED_PM
        FROM  MSDO_DASH_ADMIN.O_JOB_CAN_STG J
        JOIN  MSDO_DASH_ADMIN.O_WO_CAN_STG O ON J.WO_NO=O.WO_NO AND TRUNC(O.COMPLETED_DT)   BETWEEN ASTART AND AEND
        INNER JOIN  MSDO_DASH_ADMIN.UNIT_DEPT_COMP_MAIN_CAN_STG U
        ON O.UNIT_ID = U.UNIT_ID
        AND U.CLASS2 = 'COLL'
        AND U.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
        WHERE O.STATUS <> 'X' AND O.USING_DEPT_NO IS NOT NULL
        AND TRUNC(J.COMPLETED_DT)   BETWEEN  ASTART AND AEND
        )
		GROUP BY LOCATION,DT_WO,WO_NO,UNIT_NO HAVING MAX(JOB_DATE) BETWEEN ASTART AND AEND
		AND MAX(DT_WO)=MAX(DT_JOB)
        UNION
        SELECT LOCATION AS FAC_IDU, MAX(JOB_DATE) METRIC_DATE,UNIT_NO,MAX(EXCLUDED_PM) AS EX_WO, MAX(IS_PM) AS  PM_WO,
        COUNT(DISTINCT WO_NO) AS TOTAL_WO,WO_NO FROM
        (SELECT O.USING_DEPT_NO AS LOCATION,  J.JOB_ID,TRUNC(O.COMPLETED_DT) AS JOB_DATE,
        TRUNC(O.COMPLETED_DT, 'DAY')+6 AS DT_WO,TRUNC(J.COMPLETED_DT, 'DAY')+6 AS DT_JOB,
        O.WO_NO,U.UNIT_NO,
           CASE WHEN J.COMPONENT='PMA' OR J.COMPONENT='PMB'  OR J.JOB = '06-0PM-OIL' THEN 1 ELSE 0 END AS IS_PM,
           CASE WHEN (J.COMPONENT NOT IN ('PMA','PMB','OIL')  AND J.WO_NO IN (SELECT WO_NO FROM WO_USA_SINGLE_JOB)) AND  (J.U_SYSTEM='0PM' OR JOB_REASON='7'
           OR SUBSTR(JOB,1,6)='32-018') THEN 1 ELSE 0 END AS EXCLUDED_PM
        FROM  MSDO_DASH_ADMIN.O_JOB_USA_STG J
        JOIN  MSDO_DASH_ADMIN.O_WO_USA_STG O ON J.WO_NO=O.WO_NO AND TRUNC(O.COMPLETED_DT)   BETWEEN ASTART AND AEND
        INNER JOIN  MSDO_DASH_ADMIN.UNIT_DEPT_COMP_MAIN_USA_STG U
        ON O.UNIT_ID = U.UNIT_ID
        AND U.CLASS2 = 'COLL'
        AND U.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
        WHERE O.STATUS <> 'X' AND O.USING_DEPT_NO IS NOT NULL
        AND TRUNC(J.COMPLETED_DT)   BETWEEN  ASTART AND AEND
        )
		GROUP BY LOCATION,DT_WO,WO_NO,UNIT_NO HAVING MAX(JOB_DATE) BETWEEN ASTART AND AEND
		AND MAX(DT_WO)=MAX(DT_JOB);

        COMMIT;        

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);
		
			
		DELETE FROM VISITS_BTWN_PMI_UNITS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;

        SET_VISITS_BTWN_PMI_SITE(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_PM_EFFICIENCY_UNITS(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET PM_EFFICIENCY_UNITS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM PM_EFFICIENCY_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
        COMMIT;

        INSERT INTO PM_EFFICIENCY_UNITS(FAC_IDU,METRIC_DATE,UNIT_ID,TOTAL_PMS,CURRENT_PMS)
        (SELECT F.FAC_IDU,TRUNC(C.CURR_DT),U.UNIT_CD,
              COUNT(C.CURR_SCORE_FLG) AS TOTAL_PMS,
              SUM(DISTINCT CASE WHEN C.CURR_SCORE_FLG <> 'Y' THEN 1 ELSE 0 END) AS CURRENT_PMS-- ADDED DISTINCT&<> AS REFERED BY SAS
        FROM VIEW_ODT_COMP_ACTV_STG C INNER JOIN  ODT_COMP_UNIT U
        ON C.UNIT_ID = U.UNIT_ID
        INNER JOIN COMP_FAC_FLAT F
        ON F.FAC_IDU = U.FAC_IDU
        AND U.CLASS2_CD = 'COLL'
        --AND U.CATEGORY_CD IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
        AND TRUNC(C.CURR_DT) BETWEEN ASTART AND AEND
        GROUP BY F.FAC_IDU,TRUNC(C.CURR_DT),U.UNIT_CD);

        COMMIT;

        DELETE FROM PM_EFFICIENCY_UNITS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        SET_PM_EFFICIENCY(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_BACKLOG_TRUCK_UNITS(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET BACKLOG_TRUCK_UNITS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        DELETE FROM BACKLOG_TRUCK_UNITS WHERE TRUNC(METRIC_DATE) BETWEEN ASTART AND AEND;
        COMMIT;

    INSERT INTO BACKLOG_TRUCK_UNITS(FAC_IDU,UNIT_ID,BACKLOG_REQ,METRIC_DATE)
	WITH DT1 AS(SELECT DT FROM (SELECT  ASTART+LEVEL-1 DT FROM DUAL
          CONNECT BY LEVEL<(AEND-ASTART+2)) WHERE TRIM(TO_CHAR(DT,'day'))='saturday')
	SELECT A.FAC_IDU,A.UNIT_ID,A.BACKLOG_REQ,A.METRIC_DATE FROM
	( 		SELECT WO.LOCATION FAC_IDU,DT METRIC_DATE,UN.UNIT_NO AS UNIT_ID,COUNT(DISTINCT WR.WORK_REQ_NO) BACKLOG_REQ
                FROM M5USA.WORK_REQ WR INNER JOIN M5USA.UNIT_DEPT_COMP_MAIN UN ON WR.UNIT_ID=UN.UNIT_ID
                LEFT JOIN M5USA.WORK_OCCURANCE WO ON WR.WORK_REQ_NO = WO.WORK_REQ_NO 
                LEFT JOIN M5USA.O_JOB J ON WO.WO_NO = J.WO_NO AND J.JOB=WR.JOB,DT1
                WHERE  TRUNC(WR.CREATE_DT)  < DT AND (TRUNC(J.OPEN_DT)>DT
                OR J.OPEN_DT IS NULL) AND NVL(WO.JOB_REASON,' ') NOT IN ('C','A','7')
			AND  (COALESCE (J.JOB_REASON,WO.JOB_REASON)<>'A') AND UN.CLASS2 = 'COLL' AND 
			UN.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
			GROUP BY WO.LOCATION,UN.UNIT_NO,DT
                UNION
                SELECT WO.LOCATION FAC_IDU,DT METRIC_DATE,UN.UNIT_NO AS UNIT_ID,COUNT(DISTINCT WR.WORK_REQ_NO) BACKLOG_REQ
                FROM M5CAN.WORK_REQ WR INNER JOIN M5CAN.UNIT_DEPT_COMP_MAIN UN ON WR.UNIT_ID=UN.UNIT_ID
                LEFT JOIN M5CAN.WORK_OCCURANCE WO ON WR.WORK_REQ_NO = WO.WORK_REQ_NO 
                LEFT JOIN M5CAN.O_JOB J ON WO.WO_NO = J.WO_NO AND J.JOB=WR.JOB,DT1
                WHERE  TRUNC(WR.CREATE_DT) < DT AND (TRUNC(J.OPEN_DT)>DT
                OR J.OPEN_DT IS NULL) AND NVL(WO.JOB_REASON,' ') NOT IN ('C','A','7')
			AND  (COALESCE (J.JOB_REASON,WO.JOB_REASON)<>'A') AND UN.CLASS2 = 'COLL' AND 
			UN.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
			GROUP BY WO.LOCATION,UN.UNIT_NO,DT) A  INNER JOIN COMP_FAC_FLAT F
        ON  A.FAC_IDU  = F.FAC_IDU;

        COMMIT;

        DELETE FROM BACKLOG_TRUCK_UNITS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);
		
		SET_ART_IN_BACKLOG(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;
	
	PROCEDURE SET_ART_IN_BACKLOG(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET ART_IN_BACKLOG';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;
		
        MERGE INTO BACKLOG_TRUCK_UNITS A
        USING (SELECT WO.LOCATION FAC_IDU,AEND METRIC_DATE,AVG(J.ACT_LABOR_HRS/(1000*60*60)) ART FROM MSDO_DASH_ADMIN.O_WO_CAN_STG WO
        INNER JOIN MSDO_DASH_ADMIN.UNIT_DEPT_COMP_MAIN_CAN_STG UM ON WO.UNIT_ID=UM.UNIT_ID
        INNER JOIN MSDO_DASH_ADMIN.O_JOB_CAN_STG J ON WO.WO_NO=J.WO_NO
        INNER JOIN MSDO_DASH_ADMIN.COMP_FAC_FLAT F ON WO.LOCATION=F.FAC_IDU
        WHERE   TRUNC(J.COMPLETED_DT) BETWEEN ASTART AND AEND AND  
        WO.STATUS ^= 'X' AND WO.WO_NO^=' '
        AND J.STATUS='DON' AND
        J.JOB_REASON^='A' AND J.ACT_LABOR_HRS IS NOT NULL AND J.ACT_LABOR_HRS>0
        AND UM.CLASS2 = 'COLL' 
        AND UM.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
        AND J.ACT_COMM_COST_DO=0 
        GROUP BY WO.LOCATION
        UNION
		SELECT WO.LOCATION FAC_IDU,AEND METRIC_DATE,AVG(J.ACT_LABOR_HRS/(1000*60*60)) ART FROM MSDO_DASH_ADMIN.O_WO_USA_STG WO
        INNER JOIN MSDO_DASH_ADMIN.UNIT_DEPT_COMP_MAIN_USA_STG UM ON WO.UNIT_ID=UM.UNIT_ID
        INNER JOIN MSDO_DASH_ADMIN.O_JOB_USA_STG J ON WO.WO_NO=J.WO_NO
        INNER JOIN MSDO_DASH_ADMIN.COMP_FAC_FLAT F ON WO.LOCATION=F.FAC_IDU
        WHERE   TRUNC(J.COMPLETED_DT) BETWEEN ASTART AND AEND AND  
        WO.STATUS ^= 'X' AND WO.WO_NO^=' '
        AND J.STATUS='DON' AND
        J.JOB_REASON^='A' AND J.ACT_LABOR_HRS IS NOT NULL AND J.ACT_LABOR_HRS>0
        AND UM.CLASS2 = 'COLL' 
        AND UM.CATEGORY IN ('SFEL', 'SREL', 'ASL', 'RCYC', 'DREL', 'OP', 'DFEL', 'RO', 'MSL', 'ROBAGCO', 'RCYN')
        AND J.ACT_COMM_COST_DO=0 
        GROUP BY WO.LOCATION
            ) B
            ON (A.FAC_IDU = B.FAC_IDU AND A.METRIC_DATE = B.METRIC_DATE)
        WHEN MATCHED THEN
        UPDATE SET A.BACKLOG_HRS = B.ART;

        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);
		
		SET_BACKLOG_TRUCK_SITE(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    PROCEDURE SET_DIRECT_HRS_TECHS(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET DIRECT_HRS_TECHS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

        UPDATE TECHNICIAN_HRS
		SET DIRECT_HRS=NULL
		WHERE METRIC_DATE BETWEEN ASTART AND AEND;
		COMMIT;
		
        MERGE INTO TECHNICIAN_HRS AA
        USING (SELECT B.METRIC_DATE,B.FAC_IDU,B.EMP_ID,B.DIRECT_HRS
        FROM
        (SELECT A.METRIC_DATE,A.FAC_IDU,A.EMP_ID,A.DIRECT_HRS
         FROM   (
                    SELECT TRUNC(LBR.START_TIME) METRIC_DATE,S.LOCATION AS FAC_IDU,S.EMPLID AS EMP_ID, SUM(LBR.DURATION)/(60 * 60 * 1000) AS DIRECT_HRS
                    FROM  O_LABOR_CHG_USA_STG LBR 
                    LEFT JOIN EMP_MAIN_USA_STG EM ON LBR.EMP_ID=EM.EMP_ID
					INNER JOIN SITE_EMP S ON EM.EMP_NO=S.EMPLID
                    WHERE  TRUNC(LBR.START_TIME) BETWEEN  ASTART AND AEND
					AND S.VALID_FLG='Y'
                    GROUP BY TRUNC(LBR.START_TIME),S.LOCATION,S.EMPLID
                ) A 
               UNION
        SELECT A.METRIC_DATE,A.FAC_IDU,A.EMP_ID,A.DIRECT_HRS
        FROM
           (
					SELECT TRUNC(LBR.START_TIME) METRIC_DATE,S.LOCATION AS FAC_IDU,S.EMPLID AS EMP_ID, SUM(LBR.DURATION)/(60 * 60 * 1000) AS DIRECT_HRS
                    FROM  O_LABOR_CHG_CAN_STG LBR 
                    LEFT JOIN EMP_MAIN_CAN_STG EM ON LBR.EMP_ID=EM.EMP_ID
					INNER JOIN SITE_EMP S ON EM.EMP_NO=S.EMPLID
                    WHERE  TRUNC(LBR.START_TIME) BETWEEN  ASTART AND AEND
					AND S.VALID_FLG='Y'
                    GROUP BY TRUNC(LBR.START_TIME),S.LOCATION,S.EMPLID
                ) A 
        ) B JOIN COMP_FAC_FLAT F
        ON B.FAC_IDU = F.FAC_IDU
        ) BB
        ON ( AA.METRIC_DATE = BB.METRIC_DATE AND AA.FAC_IDU = BB.FAC_IDU AND AA.EMP_ID=BB.EMP_ID)

        WHEN MATCHED THEN
        UPDATE SET AA.DIRECT_HRS=BB.DIRECT_HRS

        WHEN NOT MATCHED THEN
        INSERT (AA.FAC_IDU,AA.METRIC_DATE,AA.EMP_ID,AA.DIRECT_HRS)
        VALUES (BB.FAC_IDU,BB.METRIC_DATE,BB.EMP_ID,BB.DIRECT_HRS);

        COMMIT;

        
        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        SET_DIRECT_HRS_SITE(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

    
    PROCEDURE SET_TECHNICIAN_HRS_TECHS(ASTART DATE,AEND DATE)
    AS
    BEGIN

        L_PROCESS.PROCESS_NAME := 'SET TECHNICIAN_HRS_TECHS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;
		
		UPDATE TECHNICIAN_HRS
		SET KRONOS_REG_HRS=NULL,KRONOS_OT_HRS=NULL
		WHERE METRIC_DATE BETWEEN ASTART AND AEND;
		COMMIT;
		
        MERGE INTO TECHNICIAN_HRS AA
        USING (SELECT S.LOCATION AS FAC_IDU,
                   TRUNC(SHIFT_DT) METRIC_DATE,
                   EMP_ID EMP_ID,
                   SUM(KRONOS_REG_HRS) AS KRONOS_REG_HRS,
                   SUM(KRONOS_OT_HRS) AS KRONOS_OT_HRS
          FROM ODT_STG O INNER JOIN SITE_EMP S ON O.EMP_ID=S.EMPLID
		  INNER JOIN COMP_FAC_FLAT F ON S.LOCATION=F.FAC_IDU
		  WHERE S.VALID_FLG='Y'
          GROUP BY LOCATION,TRUNC(SHIFT_DT),EMP_ID) BB
        ON ( AA.METRIC_DATE = BB.METRIC_DATE AND AA.FAC_IDU = BB.FAC_IDU AND AA.EMP_ID=BB.EMP_ID)

        WHEN MATCHED THEN
        UPDATE SET AA.KRONOS_REG_HRS=BB.KRONOS_REG_HRS,AA.KRONOS_OT_HRS=BB.KRONOS_OT_HRS

        WHEN NOT MATCHED THEN
        INSERT (AA.FAC_IDU,AA.METRIC_DATE,AA.EMP_ID,AA.KRONOS_REG_HRS,AA.KRONOS_OT_HRS)
        VALUES (BB.FAC_IDU,BB.METRIC_DATE,BB.EMP_ID,BB.KRONOS_REG_HRS,BB.KRONOS_OT_HRS);
		COMMIT;

        DELETE FROM TECHNICIAN_HRS WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

        SET_TECHNICIAN_HRS_SITE(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

END;
/
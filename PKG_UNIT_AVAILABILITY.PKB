CREATE OR REPLACE PACKAGE BODY MSDO_DASH_ADMIN.PKG_UNIT_AVAILABILITY
AS
/*-------------------------------------------------------------------------
DEVELOPED BY:   ASHISH KUMAR    VERSION    1.0     DATE: 04/03/2017 0432 PM
DEVELOPED BY:   JEEVAN KUMAR    VERSION    2.0     DATE: 04/10/2017 0635 PM
DEVELOPED BY:   JEEVAN KUMAR    VERSION    3.0     DATE: 04/18/2017 0652 PM
DEVELOPED BY:   JEEVAN KUMAR    VERSION    3.1     DATE: 04/25/2017 0745 PM
--------------------------------------------------------------------------*/
TYPE LR_PROCESS IS RECORD
    (
        LOG_ID              NUMBER(10),
        PROCESS_NAME        VARCHAR2(50),
        START_TIME          DATE,
        END_TIME            DATE,
        METRIC_START_DT     DATE,
        METRIC_END_DT       DATE,
        ERROR_DESC          VARCHAR2(2000)
    );

    L_PROCESS  LR_PROCESS;

    PROCEDURE SAVE_LOG(A_PROCESS IN LR_PROCESS)
    AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN

        INSERT INTO LOG_TABLE_METRIC
        (
            LOG_ID,PROCESS_NAME,START_TIME,END_TIME,METRIC_START_DT,METRIC_END_DT,ERROR_DESC
        )
        VALUES (SQ_LOG_TABLE_METRIC.NEXTVAL,A_PROCESS.PROCESS_NAME,A_PROCESS.START_TIME,A_PROCESS.END_TIME,A_PROCESS.METRIC_START_DT,A_PROCESS.METRIC_END_DT,A_PROCESS.ERROR_DESC);

        COMMIT;

    END;
	PROCEDURE UA_RUN (ASTART DATE DEFAULT SYSDATE,AEND DATE DEFAULT SYSDATE, UA_CONTROL VARCHAR2 DEFAULT NULL)
    AS
    BEGIN
    IF UPPER(UA_CONTROL)='SITE' THEN
        UA_SITE(ASTART,AEND);
    ELSIF  UA_CONTROL IS NULL THEN
        UA_UNITS(ASTART,AEND);
    END IF;
    END UA_RUN;
	PROCEDURE UA_UNITS(ASTART DATE ,AEND DATE )
	AS
	BEGIN

        L_PROCESS.PROCESS_NAME := 'SET UA_UNITS';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

	DELETE FROM UNIT_AVAILABILITY WHERE TRUNC(METRIC_DATE)=TRUNC(SYSDATE);
	COMMIT;

	INSERT INTO MSDO_DASH_ADMIN.UNIT_AVAILABILITY(METRIC_DATE,FAC_IDU,LOB,WEEKDAY,REQUIRED,UNIT_ID)
	SELECT * FROM(
SELECT TRUNC(SYSDATE) AS METRIC_DATE, H.OPER_ENTITY AS FAC_IDU,H.OPER_CLASS LOB_TYPE,H.LINE WEEK_DAY,NVL(H.QTY,0) REQUIRED,NVL(SH1.UNIT_NO,'NA') AVL FROM
( SELECT H1.OPER_ENTITY,H1.OPER_CLASS,H1.QTY,H1.LINE FROM M5USA.OPER_REQUIRE_HIST H1,(
    SELECT MAX(Z.EFF_DT) AS MAXDATE, Z.OPER_ENTITY, Z.OPER_CLASS, Z.LINE
    FROM M5USA.OPER_REQUIRE_HIST Z
    GROUP BY Z.OPER_ENTITY, Z.OPER_CLASS, Z.LINE
  ) MAXRESULTS
WHERE
	H1.OPER_ENTITY = MAXRESULTS.OPER_ENTITY
	AND H1.OPER_CLASS = MAXRESULTS.OPER_CLASS
	AND H1.LINE = MAXRESULTS.LINE
	AND H1.EFF_DT = MAXRESULTS.MAXDATE
	AND H1.OPER_CLASS IN (SELECT OPER_CLASS FROM M5USA.OPER_CLASS WHERE DISABLED_FL IS NULL)) H
LEFT JOIN
  (SELECT SH.UNIT_NO,SH.OPER_ENTITY,SH.OPER_CLASS FROM  M5USA.OPER_STATUS_HIST SH,(SELECT MAX(Z.EFF_DT) AS MAXDATE, Z.UNIT_NO
	FROM M5USA.OPER_STATUS_HIST Z GROUP BY Z.UNIT_NO) MAXRESULTS,
    M5USA.UNIT_DEPT_COMP_MAIN U
	WHERE
	SH.UNIT_ID = U.UNIT_ID
	AND U.STATUS = 'A'
	AND SH.UNIT_NO = MAXRESULTS.UNIT_NO
	AND SH.EFF_DT = MAXRESULTS.MAXDATE
	AND SH.DISPOSITION_CD = 1) SH1
ON SH1.OPER_ENTITY = H.OPER_ENTITY AND SH1.OPER_CLASS = H.OPER_CLASS
    WHERE
    H.LINE =
CASE
   WHEN TO_CHAR(SYSDATE, 'D')  = '1' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'MON AM' ELSE  'SUN AM' END
  WHEN TO_CHAR(SYSDATE, 'D')  = '2' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'TUE AM' ELSE 'MON AM'  END
 WHEN TO_CHAR(SYSDATE, 'D')  = '3' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'WED AM' ELSE 'TUE AM'  END
  WHEN TO_CHAR(SYSDATE, 'D')  = '4' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'THU AM' ELSE 'WED AM'  END
  WHEN TO_CHAR(SYSDATE, 'D')  = '5' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'FRI AM' ELSE 'THU AM'  END
  WHEN TO_CHAR(SYSDATE, 'D')  = '6' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'SAT AM' ELSE 'FRI AM'  END
  WHEN TO_CHAR(SYSDATE, 'D')  = '7' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'SUN AM' ELSE 'SAT AM'  END
END
  UNION
  SELECT TRUNC(SYSDATE) AS METRIC_DATE, H.OPER_ENTITY AS FAC_IDU,H.OPER_CLASS LOB_TYPE,H.LINE WEEK_DAY,NVL(H.QTY,0) REQUIRED,NVL(SH1.UNIT_NO,'NA') AVL FROM
( SELECT H1.OPER_ENTITY,H1.OPER_CLASS,H1.QTY,H1.LINE FROM M5CAN.OPER_REQUIRE_HIST H1,(
    SELECT MAX(Z.EFF_DT) AS MAXDATE, Z.OPER_ENTITY, Z.OPER_CLASS, Z.LINE
    FROM M5CAN.OPER_REQUIRE_HIST Z
    GROUP BY Z.OPER_ENTITY, Z.OPER_CLASS, Z.LINE
  ) MAXRESULTS
WHERE
	H1.OPER_ENTITY = MAXRESULTS.OPER_ENTITY
	AND H1.OPER_CLASS = MAXRESULTS.OPER_CLASS
	AND H1.LINE = MAXRESULTS.LINE
	AND H1.EFF_DT = MAXRESULTS.MAXDATE
	AND H1.OPER_CLASS IN (SELECT OPER_CLASS FROM M5CAN.OPER_CLASS WHERE DISABLED_FL IS NULL)) H
LEFT JOIN
  (SELECT SH.UNIT_NO,SH.OPER_ENTITY,SH.OPER_CLASS FROM  M5CAN.OPER_STATUS_HIST SH,(SELECT MAX(Z.EFF_DT) AS MAXDATE, Z.UNIT_NO
	FROM M5CAN.OPER_STATUS_HIST Z GROUP BY Z.UNIT_NO) MAXRESULTS,
    M5CAN.UNIT_DEPT_COMP_MAIN U
	WHERE
	SH.UNIT_ID = U.UNIT_ID
	AND U.STATUS = 'A'
	AND SH.UNIT_NO = MAXRESULTS.UNIT_NO
	AND SH.EFF_DT = MAXRESULTS.MAXDATE
	AND SH.DISPOSITION_CD = 1) SH1
ON SH1.OPER_ENTITY = H.OPER_ENTITY AND SH1.OPER_CLASS = H.OPER_CLASS
    WHERE
    H.LINE =
CASE
  WHEN TO_CHAR(SYSDATE, 'D')  = '1' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'MON AM' ELSE  'SUN AM' END
  WHEN TO_CHAR(SYSDATE, 'D')  = '2' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'TUE AM' ELSE 'MON AM'  END
 WHEN TO_CHAR(SYSDATE, 'D')  = '3' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'WED AM' ELSE 'TUE AM'  END
  WHEN TO_CHAR(SYSDATE, 'D')  = '4' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'THU AM' ELSE 'WED AM'  END
  WHEN TO_CHAR(SYSDATE, 'D')  = '5' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'FRI AM' ELSE 'THU AM'  END
  WHEN TO_CHAR(SYSDATE, 'D')  = '6' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'SAT AM' ELSE 'FRI AM'  END
  WHEN TO_CHAR(SYSDATE, 'D')  = '7' THEN
    CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) >= 10 THEN 'SUN AM' ELSE 'SAT AM'  END
END)
ORDER BY FAC_IDU, LOB_TYPE,
  CASE
    WHEN SUBSTR(WEEK_DAY, 1, 3) = 'MON'
    THEN 1
    WHEN SUBSTR(WEEK_DAY, 1, 3) = 'TUE'
    THEN 2
    WHEN SUBSTR(WEEK_DAY, 1, 3) = 'WED'
    THEN 3
    WHEN SUBSTR(WEEK_DAY, 1, 3) = 'THU'
    THEN 4
    WHEN SUBSTR(WEEK_DAY, 1, 3) = 'FRI'
    THEN 5
    WHEN SUBSTR(WEEK_DAY, 1, 3) = 'SAT'
    THEN 6
    WHEN SUBSTR(WEEK_DAY, 1, 3) = 'SUN'
    THEN 0
    ELSE NULL
  END;

  COMMIT;

        DELETE FROM UNIT_AVAILABILITY WHERE MONTHS_BETWEEN(SYSDATE,TRUNC(METRIC_DATE))>24;
        COMMIT;

        L_PROCESS.END_TIME := SYSDATE;
        SAVE_LOG(L_PROCESS);

		 UA_SITE(ASTART,AEND);

    EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

	PROCEDURE UA_SITE(ASTART DATE,AEND DATE)
	AS
	BEGIN

        L_PROCESS.PROCESS_NAME := 'SET UA_SITE';
        L_PROCESS.METRIC_START_DT := ASTART;
        L_PROCESS.METRIC_END_DT := AEND;
        L_PROCESS.START_TIME := SYSDATE;

	MERGE INTO SITE_METRIC A
	USING (SELECT FAC_IDU_GAP AS FAC_IDU,METRIC_DATE_GAP AS METRIC_DATE,NVL(RES_REQ,0) RES_REQ,NVL(RES_GAP,0) RES_GAP,NVL(COM_REQ,0) COM_REQ,
	NVL(COM_GAP,0) COM_GAP,NVL(IND_REQ,0) IND_REQ,NVL(IND_GAP,0) IND_GAP,NVL(OTHER_REQ,0) OTHER_REQ,NVL(OTHER_GAP,0) OTHER_GAP
			FROM (SELECT * FROM
           (SELECT FAC_IDU_GAP,METRIC_DATE_GAP,LOB_NM,GAP FROM
                    (SELECT  FAC_IDU FAC_IDU_GAP,TRUNC(METRIC_DATE) METRIC_DATE_GAP,LOB,
			(CASE WHEN (SUM( CASE WHEN UNIT_ID='NA' THEN 0 ELSE 1 END)-AVG(REQUIRED))< 0
			THEN (SUM( CASE WHEN UNIT_ID='NA' THEN 0 ELSE 1 END)-AVG(REQUIRED))
			ELSE 0 END) GAP FROM UNIT_AVAILABILITY
                    WHERE TRUNC(METRIC_DATE) BETWEEN TRUNC(ASTART) AND TRUNC(AEND) GROUP BY FAC_IDU,TRUNC(METRIC_DATE),LOB) UA
                    INNER JOIN LOB_MASTER LM ON UA.LOB=LM.LOB_TYPE  )
            PIVOT(
            SUM(GAP)
            FOR LOB_NM IN('RES' AS RES_GAP,'COM' AS COM_GAP,'IND' AS IND_GAP,'OTHER' AS OTHER_GAP)),
            (SELECT FAC_IDU_AVG,METRIC_DATE_AVG,LOB_NM,REQUIRED FROM
                    (SELECT  FAC_IDU FAC_IDU_AVG,TRUNC(METRIC_DATE) METRIC_DATE_AVG,LOB,AVG(REQUIRED) REQUIRED
                                          FROM UNIT_AVAILABILITY
                    WHERE TRUNC(METRIC_DATE) BETWEEN TRUNC(ASTART) AND TRUNC(AEND) GROUP BY FAC_IDU,TRUNC(METRIC_DATE),LOB) UA
                    INNER JOIN LOB_MASTER LM ON UA.LOB=LM.LOB_TYPE  )
            PIVOT(
            SUM (REQUIRED)
            FOR LOB_NM IN('RES' AS RES_REQ,'COM' AS COM_REQ,'IND' AS IND_REQ,'OTHER' AS OTHER_REQ)))
			WHERE FAC_IDU_GAP=FAC_IDU_AVG AND METRIC_DATE_GAP=METRIC_DATE_AVG
			)B
	ON (A.FAC_IDU=B.FAC_IDU AND A.METRIC_DATE=B.METRIC_DATE)
	WHEN MATCHED THEN
	UPDATE
	SET A.LAST_MODIFIED=SYSDATE,A.RES_REQ=B.RES_REQ,A.RES_GAP=B.RES_GAP,A.COM_REQ=B.COM_REQ,A.COM_GAP=B.COM_GAP,A.IND_REQ=B.IND_REQ,A.IND_GAP=B.IND_GAP,A.OTHER_REQ=B.OTHER_REQ,A.OTHER_GAP=B.OTHER_GAP
	WHEN NOT MATCHED THEN
	INSERT (A.FAC_IDU,A.METRIC_DATE,A.RES_REQ,A.RES_GAP,A.COM_REQ,A.COM_GAP,A.IND_REQ,A.IND_GAP,A.OTHER_REQ,A.OTHER_GAP)
	VALUES(B.FAC_IDU,B.METRIC_DATE,B.RES_REQ,B.RES_GAP,B.COM_REQ,B.COM_GAP,B.IND_REQ,B.IND_GAP,B.OTHER_REQ,B.OTHER_GAP);

	COMMIT;

	L_PROCESS.END_TIME := SYSDATE;
    SAVE_LOG(L_PROCESS);

	 EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;
        L_PROCESS.END_TIME := SYSDATE;
        L_PROCESS.ERROR_DESC := SUBSTR(SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,1,2000);
        SAVE_LOG(L_PROCESS);

    END;

END;
/